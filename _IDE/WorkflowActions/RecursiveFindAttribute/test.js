"use strict";
(function() {
  function createModel(actionModel, actionOptions, wfModel, stepModel) {
    var self = actionModel;
    let config = {
      workItemIdVariable: "",
      attribute: "",
      outputVariable: "",
      parents: false,
      children: false
    };
    var defaults = {
      // Your custom config is passed in this object
      config,
      // The list of connections as persisted
      connections: {}
    };
    var options = $.extend(true, {}, defaults, actionOptions);
    self.config.workItemIdVariable = ko.observable(options.config.workItemIdVariable);
    self.config.attribute = ko.observable(options.config.attribute);
    self.config.outputVariable = ko.observable(options.config.outputVariable);
    self.config.parents = ko.observable(options.config.parents);
    self.config.children = ko.observable(options.config.children);
    self.addAvailableOutlet("found", "Attribute Found");
    self.addAvailableOutlet("notFound", "Attribute Not Found");
    self.validation.workItemIdVariable = Validator.required(self, self.config.workItemIdVariable, "Specify variable holding the work item id to transition");
    self.ui.outputVariable = actionModel.trackVariable(self.config.outputVariable, "/String");
    self.actionModelErrorCount = ko.pureComputed(() => {
      var fails = 0;
      if (self.validation.workItemIdVariable())
        fails++;
      return fails;
    });
    self.ui.workItemIdVariable = self.trackVariable(self.config.workItemIdVariable, "/Identifier/Work Type Identifier");
  }
  function dispose(actionModel) {
    var self = actionModel;
    self.ui.workItemIdVariable.dispose();
  }
  function getModel(actionModel) {
    var config = ko.toJS(actionModel.config);
    return config;
  }
  ;
  const RecursiveFindAttribute = {
    createModel,
    dispose,
    getModel
  };
  return {
    createModel,
    dispose
  };
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL05vZGVCYXNlZC9Xb3JrZmxvd0FjdGlvbnMvUmVjdXJzaXZlRmluZEF0dHJpYnV0ZS9SZWN1cnNpdmVGaW5kQXR0cmlidXRlLWZhY3RvcnkudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IENvbmZpZ3VyYXRpb25UeXBlLCBPYnNlcnZhYmxlQ29uZmlnIH0gZnJvbSBcIi4vSUNvbmZpZ3VyYXRpb25cIjtcblxuXG5pbnRlcmZhY2UgQWN0aW9uTW9kZWwge1xuICAgIGFkZEF2YWlsYWJsZU91dGxldDogYW55O1xuICAgIGNvbmZpZzogT2JzZXJ2YWJsZUNvbmZpZztcbiAgICB2YWxpZGF0aW9uOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106ICgpID0+IGJvb2xlYW47XG4gICAgfTtcbiAgICBhY3Rpb25Nb2RlbEVycm9yQ291bnQ6IGtvLlB1cmVDb21wdXRlZDxudW1iZXI+O1xuICAgIHVpOiB7XG4gICAgICAgIHdvcmtJdGVtSWRWYXJpYWJsZTogYW55OyAgLy8gQWRqdXN0IHRoZSB0eXBlIGJhc2VkIG9uIHRoZSBhY3R1YWwgaW1wbGVtZW50YXRpb25cbiAgICAgICAgb3V0cHV0VmFyaWFibGU6IGFueTtcbiAgICB9O1xuICAgIHRyYWNrVmFyaWFibGU6IChvYnNlcnZhYmxlOiBrby5PYnNlcnZhYmxlPHN0cmluZyB8IHVuZGVmaW5lZCB8IG51bGw+LCB0eXBlOiBzdHJpbmcpID0+IGFueTtcbn1cblxuaW50ZXJmYWNlIERlZmF1bHRzIHtcbiAgICBjb25maWc6IENvbmZpZ3VyYXRpb25UeXBlO1xuICAgIGNvbm5lY3Rpb25zOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICB9O1xufVxuXG4oZnVuY3Rpb24oKVxueyBcbiAgICAgZnVuY3Rpb24gY3JlYXRlTW9kZWwoYWN0aW9uTW9kZWw6IEFjdGlvbk1vZGVsLCBhY3Rpb25PcHRpb25zOiBEZWZhdWx0cywgd2ZNb2RlbDogYW55LCBzdGVwTW9kZWw6IGFueSkge1xuICAgICAgICAvLyBSZWZlcmVuY2Ugc2VsZiBhcyB0aGUgYWN0aW9uIG1vZGVsIHdlJ3JlIGV4dGVuZGluZ1xuICAgICAgICB2YXIgc2VsZiA9IGFjdGlvbk1vZGVsO1xuXG4gICAgICAgIGxldCBjb25maWcgOiBDb25maWd1cmF0aW9uVHlwZSA9IHtcbiAgICAgICAgICAgICAgICB3b3JrSXRlbUlkVmFyaWFibGU6IFwiXCIsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlOlwiXCIsXG4gICAgICAgICAgICAgICAgb3V0cHV0VmFyaWFibGU6IFwiXCIsXG4gICAgICAgICAgICAgICAgcGFyZW50czogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IGZhbHNlLFxuICAgICAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIC8vIFNldHVwIG1vZGVsIGRlZmF1bHRzIGFuZCBleHRlbmQgZnJvbSBsb2FkZWQgY29uZmlnXG4gICAgICAgIHZhciBkZWZhdWx0cyA9XG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFlvdXIgY3VzdG9tIGNvbmZpZyBpcyBwYXNzZWQgaW4gdGhpcyBvYmplY3RcbiAgICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUaGUgbGlzdCBvZiBjb25uZWN0aW9ucyBhcyBwZXJzaXN0ZWRcbiAgICAgICAgICAgIGNvbm5lY3Rpb25zOiB7fVxuICAgICAgICB9O1xuICAgICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBkZWZhdWx0cywgYWN0aW9uT3B0aW9ucyk7XG5cbiAgICAgICAgLy8gRXh0ZW5kIHRoZSBhY3Rpb24gbW9kZWwgd2l0aCBjdXN0b20gbW9kZWxcbiAgICAgICAgc2VsZi5jb25maWcud29ya0l0ZW1JZFZhcmlhYmxlID0ga28ub2JzZXJ2YWJsZShvcHRpb25zLmNvbmZpZy53b3JrSXRlbUlkVmFyaWFibGUpO1xuICAgICAgICBzZWxmLmNvbmZpZy5hdHRyaWJ1dGUgPSBrby5vYnNlcnZhYmxlKG9wdGlvbnMuY29uZmlnLmF0dHJpYnV0ZSk7XG4gICAgICAgIHNlbGYuY29uZmlnLm91dHB1dFZhcmlhYmxlID0ga28ub2JzZXJ2YWJsZShvcHRpb25zLmNvbmZpZy5vdXRwdXRWYXJpYWJsZSk7XG4gICAgICAgIHNlbGYuY29uZmlnLnBhcmVudHMgPSBrby5vYnNlcnZhYmxlKG9wdGlvbnMuY29uZmlnLnBhcmVudHMpO1xuICAgICAgICBzZWxmLmNvbmZpZy5jaGlsZHJlbiA9IGtvLm9ic2VydmFibGUob3B0aW9ucy5jb25maWcuY2hpbGRyZW4pO1xuXG4gICAgICAgXG5cbiAgICAgICAgLy8gRm9yY2UgdGhlIGV4ZWN1dGUgb3V0bGV0IHRvIGJlIHByZXNlbnQgLSBpZ25vcmluZyBhbnl0aGluZyBpbiB0aGVcbiAgICAgICAgLy8gcGVyc2lzdGVkIG1vZGVsICh0aGVyZSdzIGFsd2F5cyBvbmUgb3V0bGV0IGFuZCBpdCdzIGFsd2F5cyBjYWxsZWQgZXhlY3V0ZVxuICAgICAgICBzZWxmLmFkZEF2YWlsYWJsZU91dGxldChcImZvdW5kXCIsIFwiQXR0cmlidXRlIEZvdW5kXCIpO1xuICAgICAgICBzZWxmLmFkZEF2YWlsYWJsZU91dGxldChcIm5vdEZvdW5kXCIsIFwiQXR0cmlidXRlIE5vdCBGb3VuZFwiKTtcblxuICAgICAgICAvLyBFeHRlbmQgdGhlIGFjdGlvbiBtb2RlbCB2YWxpZGF0aW9uXG4gICAgICAgIHNlbGYudmFsaWRhdGlvbi53b3JrSXRlbUlkVmFyaWFibGUgPSBWYWxpZGF0b3IucmVxdWlyZWQoc2VsZiwgc2VsZi5jb25maWcud29ya0l0ZW1JZFZhcmlhYmxlLCBcIlNwZWNpZnkgdmFyaWFibGUgaG9sZGluZyB0aGUgd29yayBpdGVtIGlkIHRvIHRyYW5zaXRpb25cIik7XG4gICAgICAgIHNlbGYudWkub3V0cHV0VmFyaWFibGUgPSBhY3Rpb25Nb2RlbC50cmFja1ZhcmlhYmxlKHNlbGYuY29uZmlnLm91dHB1dFZhcmlhYmxlLCBcIi9TdHJpbmdcIik7XG5cbiAgICAgICAgc2VsZi5hY3Rpb25Nb2RlbEVycm9yQ291bnQgPSBrby5wdXJlQ29tcHV0ZWQoKCkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGZhaWxzID0gMDtcbiAgICAgICAgICAgIGlmIChzZWxmLnZhbGlkYXRpb24ud29ya0l0ZW1JZFZhcmlhYmxlKCkpIGZhaWxzKys7XG4gICAgICAgICAgICByZXR1cm4gZmFpbHM7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFZhcmlhYmxlIHNlbGVjdG9yXG4gICAgICAgIHNlbGYudWkud29ya0l0ZW1JZFZhcmlhYmxlID0gc2VsZi50cmFja1ZhcmlhYmxlKHNlbGYuY29uZmlnLndvcmtJdGVtSWRWYXJpYWJsZSwgXCIvSWRlbnRpZmllci9Xb3JrIFR5cGUgSWRlbnRpZmllclwiKTtcbiAgICB9XG5cbiAgICAgZnVuY3Rpb24gZGlzcG9zZShhY3Rpb25Nb2RlbDogQWN0aW9uTW9kZWwpIHtcbiAgICAgICAgdmFyIHNlbGYgPSBhY3Rpb25Nb2RlbDtcbiAgICAgICAgc2VsZi51aS53b3JrSXRlbUlkVmFyaWFibGUuZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldE1vZGVsKGFjdGlvbk1vZGVsOiBBY3Rpb25Nb2RlbClcbiAgICB7XG4gICAgICAgIHZhciBjb25maWcgPSBrby50b0pTKGFjdGlvbk1vZGVsLmNvbmZpZyk7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgICBjb25zdCBSZWN1cnNpdmVGaW5kQXR0cmlidXRlID0ge1xuICAgICAgICBjcmVhdGVNb2RlbDogY3JlYXRlTW9kZWwsXG4gICAgICAgIGRpc3Bvc2U6IGRpc3Bvc2UsXG4gICAgICAgIGdldE1vZGVsOiBnZXRNb2RlbFxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGNyZWF0ZU1vZGVsOiBjcmVhdGVNb2RlbCxcbiAgICAgICAgZGlzcG9zZTogZGlzcG9zZVxuICAgIH07XG59KSgpO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtDQXdCQyxXQUNEO0FBQ0ssV0FBUyxZQUFZLGFBQTBCLGVBQXlCLFNBQWMsV0FBZ0I7QUFFbkcsUUFBSSxPQUFPO0FBRVgsUUFBSSxTQUE2QjtBQUFBLE1BQ3pCLG9CQUFvQjtBQUFBLE1BQ3BCLFdBQVU7QUFBQSxNQUNWLGdCQUFnQjtBQUFBLE1BQ2hCLFNBQVM7QUFBQSxNQUNULFVBQVU7QUFBQSxJQUVsQjtBQUVBLFFBQUksV0FDSjtBQUFBO0FBQUEsTUFFSTtBQUFBO0FBQUEsTUFHQSxhQUFhLENBQUM7QUFBQSxJQUNsQjtBQUNBLFFBQUksVUFBVSxFQUFFLE9BQU8sTUFBTSxDQUFDLEdBQUcsVUFBVSxhQUFhO0FBR3hELFNBQUssT0FBTyxxQkFBcUIsR0FBRyxXQUFXLFFBQVEsT0FBTyxrQkFBa0I7QUFDaEYsU0FBSyxPQUFPLFlBQVksR0FBRyxXQUFXLFFBQVEsT0FBTyxTQUFTO0FBQzlELFNBQUssT0FBTyxpQkFBaUIsR0FBRyxXQUFXLFFBQVEsT0FBTyxjQUFjO0FBQ3hFLFNBQUssT0FBTyxVQUFVLEdBQUcsV0FBVyxRQUFRLE9BQU8sT0FBTztBQUMxRCxTQUFLLE9BQU8sV0FBVyxHQUFHLFdBQVcsUUFBUSxPQUFPLFFBQVE7QUFNNUQsU0FBSyxtQkFBbUIsU0FBUyxpQkFBaUI7QUFDbEQsU0FBSyxtQkFBbUIsWUFBWSxxQkFBcUI7QUFHekQsU0FBSyxXQUFXLHFCQUFxQixVQUFVLFNBQVMsTUFBTSxLQUFLLE9BQU8sb0JBQW9CLHlEQUF5RDtBQUN2SixTQUFLLEdBQUcsaUJBQWlCLFlBQVksY0FBYyxLQUFLLE9BQU8sZ0JBQWdCLFNBQVM7QUFFeEYsU0FBSyx3QkFBd0IsR0FBRyxhQUFhLE1BQzdDO0FBQ0ksVUFBSSxRQUFRO0FBQ1osVUFBSSxLQUFLLFdBQVcsbUJBQW1CO0FBQUc7QUFDMUMsYUFBTztBQUFBLElBQ1gsQ0FBQztBQUdELFNBQUssR0FBRyxxQkFBcUIsS0FBSyxjQUFjLEtBQUssT0FBTyxvQkFBb0Isa0NBQWtDO0FBQUEsRUFDdEg7QUFFQyxXQUFTLFFBQVEsYUFBMEI7QUFDeEMsUUFBSSxPQUFPO0FBQ1gsU0FBSyxHQUFHLG1CQUFtQixRQUFRO0FBQUEsRUFDdkM7QUFFQSxXQUFTLFNBQVMsYUFDbEI7QUFDSSxRQUFJLFNBQVMsR0FBRyxLQUFLLFlBQVksTUFBTTtBQUN2QyxXQUFPO0FBQUEsRUFDWDtBQUFDO0FBRUEsUUFBTSx5QkFBeUI7QUFBQSxJQUM1QjtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsRUFDSjtBQUVBLFNBQU87QUFBQSxJQUNIO0FBQUEsSUFDQTtBQUFBLEVBQ0o7QUFDSixHQUFHOyIsCiAgIm5hbWVzIjogW10KfQo=
