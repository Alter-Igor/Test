"use strict";

// src/NodeBased/WorkflowActions/RecursiveFindAttribute/search.ts
function searchForAttributeRecursive(workItemId2, attributeName, parents, children) {
  let retValue = { found: false, value: void 0, parentId: void 0 };
  retValue = searchForAttribute(workItemId2, attributeName);
  if (retValue.found) {
    return retValue;
  }
  if (!parents && !children) {
    log.Information("No parents or children to search so only searching current work item");
    return retValue;
  }
  if (parents) {
    log.Information("Searching parents");
    let searchParent = (parentId) => {
      let r = { found: false, value: void 0, parentId: void 0 };
      if (!parentId) {
        log.Information("No parent found");
        return r;
      }
      r = searchForAttribute(parentId, attributeName);
      if (r.found) {
        log.Information("Found attribute in parent");
        return r;
      } else {
        if (!r.parentId) {
          log.Information("No parent found");
          return r;
        }
        log.Information("Not found in parent");
        return searchParent(r.parentId);
      }
    };
    retValue = searchParent(retValue.parentId);
  }
  return retValue;
}
function searchForAttribute(workItemId2, attributeName) {
  let retValue = { found: false, value: void 0, parentId: void 0 };
  let req = {
    "search": {
      "workItemIds": [
        workItemId2
      ]
    },
    "enrich": [
      {
        "path": "title"
      },
      {
        "path": "parent.id"
      },
      {
        "path": "type.systemName"
      },
      {
        "path": "reference"
      },
      {
        "path": attributeName
      }
    ]
  };
  log.Information("Searching using ShareDo Id: " + workItemId2);
  let httpResultFindByQuery = sharedo.http.post("/api/v1/public/workItem/findByQuery", req);
  httpResultFindByQuery.success = true;
  if (!httpResultFindByQuery.success) {
    log.Error("Error");
    log.Information(JSON.stringify(httpResultFindByQuery));
    throw new Error("Error searching: '".concat(httpResultFindByQuery.status, "'"));
  }
  if (!httpResultFindByQuery.body || httpResultFindByQuery.body.totalCount == 0) {
    log.Error("Error");
    log.Information(JSON.stringify(httpResultFindByQuery));
    log.Error("Work item ".concat(workItemId2, " not found"));
    throw new Error("Work item ".concat(workItemId2, " not found"));
  }
  log.Information("Work item ".concat(workItemId2, " found"));
  log.Information(JSON.stringify(httpResultFindByQuery.body.results));
  let typeSystemName = httpResultFindByQuery.body.results[0].data["type.systemName"];
  let parentId = httpResultFindByQuery.body.results[0].data["parent.id"];
  let attribute = httpResultFindByQuery.body.results[0].data[attributeName];
  log.Information("Type system name is ".concat(typeSystemName));
  log.Information("Parent Id is ".concat(parentId));
  log.Information("Attribute [".concat(attributeName, "] is ").concat(attribute));
  retValue.value = attribute;
  if (attribute) {
    retValue.found = true;
  }
  retValue.parentId = parentId;
  return retValue;
}

// src/NodeBased/WorkflowActions/RecursiveFindAttribute/RecursiveFindAttribute-template.ts
var connections = $model.Connections;
var configuration = $model.Configuration;
var workItemId = ctx[configuration.workItemIdVariable];
if (!workItemId) {
  throw new Error("!workItemId - check ctx.".concat(configuration.workItemIdVariable));
}
if (!configuration.attribute) {
  throw new Error("!configuration.attribute - check configuration");
}
var attributeValue = searchForAttributeRecursive(workItemId, configuration.attribute, configuration.parents, configuration.children);
var _a, _b;
if (attributeValue.found) {
  log.Information("--------------------------------------");
  log.Information("Found attribute [".concat(configuration.attribute, "] with value [").concat((_a = attributeValue.value) == null ? void 0 : _a.toString(), "]"));
  log.Information("Setting output variable [".concat(configuration.outputVariable, "] to [").concat((_b = attributeValue.value) == null ? void 0 : _b.toString(), "]"));
  log.Information("-------------------------------------");
  ctx[configuration.outputVariable] = attributeValue.value;
  if (connections.found) {
    trigger.SubProcess(connections.found.step()).Now();
  }
} else {
  if (connections.notFound) {
    trigger.SubProcess(connections.notFound.step()).Now();
  }
}
//# sourceMappingURL=data:application/json;base64,
