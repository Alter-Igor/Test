"use strict";

// src/NodeBased/WorkflowActions/CreateTaskv2/CreateTaskv2-factory.ts
(function() {
  function createModel(actionModel, actionOptions, wfModel, stepModel) {
    var defaults = {
      // Your custom config is passed in this object
      config: {
        taskType: "task",
        // The task type to create
        taskTitle: null,
        // The title of the task to create
        dueOnVariable: null,
        // Variable holding the date the task is due
        priorityId: null,
        // The priorityId of the task
        dueInDays: 0,
        // The number of days in which the task will be due
        tag: null,
        // Any tag required
        instanceTag: null,
        // Any instance tag required
        addActionPlan: false,
        // Whether to add an action plan to the task
        actionPlanTitle: "",
        // Title for the action plan,
        parentWorkItemId: null,
        // The variable holding the parent work item id
        taskOwnerOdsId: null,
        // The variable holding who to assign the task to
        actionPlanItemsList: null,
        // The variable holding an array of action plan items to associate with the task
        outputVariable: null,
        // The variable to output the new task id to
        onCompleteOutlet: true,
        // Whether to add the "task complete" outlet
        onOverdueOutlet: true,
        // Whether to add the "overdue" outlet
        phaseOutlets: [],
        // List of phase specific outlets,
        assignments: []
        // List of assignments [{roleSystemName, odsIdVariableName}]
      },
      // The list of connections as persisted
      connections: {}
    };
    var options = $.extend(true, {}, defaults, actionOptions);
    actionModel.config.taskType = ko.observable(options.config.taskType);
    actionModel.config.taskTitle = ko.observable(options.config.taskTitle);
    actionModel.config.dueInDays = ko.observable(options.config.dueInDays);
    actionModel.config.tag = ko.observable(options.config.tag);
    actionModel.config.instanceTag = ko.observable(options.config.instanceTag);
    actionModel.config.dueOnVariable = ko.observable(options.config.dueOnVariable);
    actionModel.config.priorityId = ko.observable(options.config.priorityId);
    actionModel.config.addActionPlan = ko.observable(options.config.addActionPlan);
    actionModel.config.actionPlanTitle = ko.observable(options.config.actionPlanTitle);
    actionModel.config.parentWorkItemId = ko.observable(options.config.parentWorkItemId);
    actionModel.config.taskOwnerOdsId = ko.observable(options.config.taskOwnerOdsId);
    actionModel.config.actionPlanItemsList = ko.observable(options.config.actionPlanItemsList);
    actionModel.config.outputVariable = ko.observable(options.config.outputVariable);
    actionModel.config.onCompleteOutlet = ko.observable(options.config.onCompleteOutlet);
    actionModel.config.onOverdueOutlet = ko.observable(options.config.onOverdueOutlet);
    actionModel.validation.taskType = Validator.required(actionModel, actionModel.config.taskType, "Must specify the type of task to create");
    actionModel.validation.taskTitle = Validator.required(actionModel, actionModel.config.taskTitle, "Task title must be provided");
    actionModel.validation.parentWorkItemId = Validator.required(actionModel, actionModel.config.parentWorkItemId, "You must specify a variable holding the parent work item id");
    actionModel.validation.actionPlanTitle = ko.pureComputed(() => {
      var addActionPlan = actionModel.config.addActionPlan();
      var actionPlanTitle = actionModel.config.actionPlanTitle();
      if (addActionPlan && !actionPlanTitle)
        return "Action plan title must be provided";
      return null;
    });
    actionModel.actionModelErrorCount = ko.pureComputed(function() {
      var fails = 0;
      if (actionModel.validation.taskType())
        fails++;
      if (actionModel.validation.taskTitle())
        fails++;
      if (actionModel.validation.parentWorkItemId())
        fails++;
      if (actionModel.validation.actionPlanTitle())
        fails++;
      return fails;
    });
    if (options.config.onCompleteOutlet) {
      actionModel.addAvailableOutlet("onComplete", "Task complete");
    }
    if (options.config.onOverdueOutlet) {
      actionModel.addAvailableOutlet("onOverdue", "Overdue");
    }
    actionModel.ui.parentWorkItemId = actionModel.trackVariable(actionModel.config.parentWorkItemId, "/Identifier/Work Type Identifier");
    actionModel.ui.taskOwnerOdsId = actionModel.trackVariable(actionModel.config.taskOwnerOdsId, "/Identifier/Ods Entity Identifier");
    actionModel.ui.dueOnVariable = actionModel.trackVariable(actionModel.config.dueOnVariable, "/Date Time");
    actionModel.ui.actionPlanItemsList = actionModel.trackVariable(
      actionModel.config.actionPlanItemsList,
      "/Entity/Action Plan Item",
      {
        mustBeCollection: true,
        mustNotBeCollection: false
      }
    );
    actionModel.ui.outputVariable = actionModel.trackVariable(actionModel.config.outputVariable, "/Identifier/Work Type Identifier/Task Identifier");
    actionModel.ui.phases = new Sharedo.Core.Case.WorkflowEditor.WFPhaseOutlets(actionModel, options.config.phaseOutlets);
    actionModel.ui.assignments = new Sharedo.Core.Case.WorkflowEditor.WFAssignments(actionModel, options.config.assignments);
  }
  ;
  function dispose(actionModel) {
    actionModel.ui.parentWorkItemId.dispose();
    actionModel.ui.taskOwnerOdsId.dispose();
    actionModel.ui.dueOnVariable.dispose();
    actionModel.ui.actionPlanItemsList.dispose();
    actionModel.ui.outputVariable.dispose();
    actionModel.ui.phases.dispose();
    actionModel.ui.assignments.dispose();
  }
  ;
  function getModel(actionModel) {
    var config = ko.toJS(actionModel.config);
    config.phaseOutlets = actionModel.ui.phases.getModel();
    config.assignments = actionModel.ui.assignments.getModel();
    return config;
  }
  ;
  return {
    createModel,
    getModel,
    dispose
  };
})();
//# sourceMappingURL=data:application/json;base64,
