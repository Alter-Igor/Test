"use strict";

// src/NodeBased/WorkflowActions/CreateTaskv2/CreateTaskv2-template.ts
var connections = $model.Connections;
var configuration = $model.Configuration;
var taskId = Guid.NewGuid();
var dueOn = DateTime.Now;
log.Information("taskId:".concat(JSON.stringify(taskId)));
log.Information("taskId:".concat(taskId.ToString()));
if (configuration.outputVariable) {
  ctx[configuration.outputVariable] = taskId.ToString();
}
if (configuration.dueInDays) {
  if (configuration.dueInDays) {
    dueOn = DateTime.Now.AddDays($model.Configuration.dueInDays);
  }
}
if (configuration.dueOnVariable) {
  dueOn = DateTime.Parse(ctx[configuration.dueOnVariable]);
}
var task = actions.sharedo.BuildTask();
task = task.WithId(taskId).OfType(configuration.taskType).WithTitle(sharedo.buildString(configuration.taskTitle)).DueOn(dueOn);
if (connections["onOverdue"]) {
  task.OnOverdue(connections["onOverdue"].step);
}
if (connections["onComplete"]) {
  task.OnComplete(connections["onComplete"].step);
}
if (configuration.tag) {
  task.WithTag(sharedo.buildString(configuration.tag));
}
if (configuration.priorityId) {
  task.WithPriorityId($model.Configuration.priorityId);
}
if (configuration.OnReminderDue) {
  task.OnReminderDue(connections["onReminderDue"].step).At(1).Minutes;
}
if (configuration.phaseOutlets) {
  configuration.phaseOutlets.forEach((outlet) => {
    if (connections[outlet.systemName]) {
      task.OnPhase(outlet.systemName, connections[outlet.systemName].step);
    }
  });
}
if (configuration.parentWorkItemId) {
  let parentId = ctx[configuration.parentWorkItemId];
  if (parentId) {
    task = task.ForSharedo(parentId);
  }
}
if (configuration.taskOwnerOdsId) {
  let ownerId = ctx[configuration.taskOwnerOdsId];
  if (ownerId) {
    task = task.Assign("primary-owner").To(ownerId);
  }
}
if (configuration.assignments) {
  configuration.assignments.forEach((assignment) => {
    if (assignment.odsIdVariableName) {
      task = task.Assign(assignment.roleSystemName).To(ctx[assignment.odsIdVariableName]);
    }
  });
}
if (configuration.addActionPlan) {
  let actionPlanBuilder = task.WithActionPlan().WithTitle(sharedo.buildString(configuration.actionPlanTitle));
  if (configuration.actionPlanItemsList) {
    let itemsAsString = ctx[configuration.actionPlanItemsList];
    log.Information("*** itemsAsString:");
    log.Information(JSON.stringify(itemsAsString));
    if (itemsAsString) {
      let items = itemsAsString;
      items.slice().sort((a, b) => Number.parseInt(a.order, 10) - Number.parseInt(b.order, 10)).forEach(function(i) {
        log.Information("*** i:");
        log.Information("description: " + i.description);
        log.Information("type: " + i.type);
        log.Information("order: " + i.order);
        log.Information("**********");
        let actionPlanItem = buildActionPlan(i);
        log.Information("*** actionPlanItem:");
        log.Information(JSON.stringify(actionPlanItem));
        actionPlanBuilder = actionPlanBuilder.AddItem(actionPlanItem);
      });
    }
  }
  log.Information("*** actionPlanBuilder:");
  log.Information(JSON.stringify(actionPlanBuilder));
  task = actionPlanBuilder.Build();
  log.Information("*** final Task:");
  log.Information(JSON.stringify(task));
}
task.Save();
if (configuration.instanceTag) {
  log.Information("*** Updating the Instance Tag ****");
  let model = {
    value: configuration.instanceTag
  };
  let url = "/api/v1/public/workItem/".concat(taskId.ToString(), "/attributes/instanceTag");
  log.Information("url: ".concat(url));
  let result = sharedo.http.post(url, model);
  if (!result.success) {
    log.Error("Failed to update InstanceTag Attribute: ".concat(JSON.stringify(result)));
    log.Information("JSON: ".concat(JSON.stringify(result)));
    throw new Error("Failed to update InstanceTag Attribute!");
  }
  log.Information("InstanceTag Attribute Updated!");
  log.Information("*** Updating the Instance Tag Complated ****");
}
log.Information("*** task post save:");
log.Information(JSON.stringify(task));
function buildActionPlan(actionPlanModel) {
  log.Information("*** function buildActionPlan()");
  let actionPlan = actions.sharedo.BuildActionPlanItem();
  actionPlan = actionPlan.WithDescription(actionPlanModel.description);
  let type = actionPlanModel.type;
  if (type === "checkbox") {
    actionPlan = actionPlan.AddCheckbox();
  }
  if (type === "infobox") {
    actionPlan = actionPlan.AddInformation();
  }
  if (type === "header") {
    actionPlan = actionPlan.AddHeader();
  }
  if (actionPlanModel.mandatory) {
    actionPlan = actionPlan.MarkRequired();
  }
  let order = actionPlanModel.order;
  actionPlan = actionPlan.WithOrder(order);
  if (actionPlanModel.callToActionVar) {
    let callToAction = actionPlanModel.callToActionVar;
    if (!callToAction) {
      log.Warning("Create action plan - a call to action variable ($model.Configuration.callToActionVar) was specified but was empty");
    } else {
      let cta = buildCallToAction(callToAction);
      actionPlan = actionPlan.WithCallToAction(cta);
    }
  }
  let plan = actionPlan.Build();
  log.Information("*** function buildActionPlan() finished");
  return plan;
}
function buildCallToAction(callToActionModel) {
  log.Information("*********** function buildCallToAction() *****************");
  log.Information("************-Data-****************");
  log.Information(JSON.stringify(callToActionModel));
  log.Information("****************************");
  let cta = actions.sharedo.BuildCallToAction().WithDisplay(callToActionModel.title);
  if (callToActionModel.styles) {
    cta = cta.WithStyles(callToActionModel.styles);
  }
  cta = cta.Build();
  cta.CallToActionContextType = callToActionModel.contextType;
  log.Information("ContextIdVariable: " + callToActionModel.contextIdVariable);
  if (callToActionModel.contextIdVariable) {
    let contextId = ctx[callToActionModel.contextIdVariable];
    if (contextId) {
      log.Information("typeof contextId: ".concat(typeof contextId));
      if (typeof contextId === "string") {
        contextId = Guid.Parse(contextId);
      }
      log.Information("ContextId: " + contextId);
      cta.CallToActionContextId = contextId;
      log.Information("cta.CallToActionContextId: " + cta.CallToActionContextId);
    } else {
      log.Warning("ContextIdVariable: ".concat(callToActionModel.contextIdVariable, " was not found in the context"));
    }
  }
  cta.CallToActionCommand = callToActionModel.command;
  if (callToActionModel.commandConfig) {
    cta.CallToActionCommandConfiguration = callToActionModel.commandConfig;
  }
  if (!callToActionModel.commandConfig) {
    cta.CallToActionCommandConfiguration = "{}";
  }
  if (callToActionModel.icon) {
    cta.CallToActionIcon = callToActionModel.icon;
  }
  if (callToActionModel.css) {
    cta.CallToActionCss = callToActionModel.css;
  }
  log.Information("**** buildCallToAction finished");
  return cta;
}
//# sourceMappingURL=data:application/json;base64,
