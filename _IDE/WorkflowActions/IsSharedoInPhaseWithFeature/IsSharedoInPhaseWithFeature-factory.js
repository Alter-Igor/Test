"use strict";

// src/NodeBased/WorkflowActions/IsSharedoInPhaseWithFeature/IsSharedoInPhaseWithFeature-factory.ts
(function() {
  function createModel(actionModel, actionOptions, wfModel, stepModel) {
    var self = actionModel;
    let config = {
      workItemIdVariable: "",
      phaseFeature: null
    };
    var defaults = {
      // Your custom config is passed in this object
      config,
      // The list of connections as persisted
      connections: {}
    };
    var options = $.extend(true, {}, defaults, actionOptions);
    self.config.workItemIdVariable = ko.observable(options.config.workItemIdVariable);
    self.config.phaseFeature = ko.observable(options.config.phaseFeature);
    self.addAvailableOutlet("exists", "Phase Feature Exists");
    self.addAvailableOutlet("doesNotExist", "Phase Feature Does Not Exist");
    self.validation.workItemIdVariable = Validator.required(self, self.config.workItemIdVariable, "Specify variable holding the work item id to transition");
    self.validation.phaseFeature = Validator.required(self, self.config.phaseFeature, "Specify the phase feature to transition to");
    self.actionModelErrorCount = ko.pureComputed(() => {
      var fails = 0;
      if (self.validation.workItemIdVariable())
        fails++;
      if (self.validation.phaseFeature())
        fails++;
      return fails;
    });
    self.ui.workItemIdVariable = self.trackVariable(self.config.workItemIdVariable, "/Identifier/Work Type Identifier");
  }
  function dispose(actionModel) {
    var self = actionModel;
    self.ui.workItemIdVariable.dispose();
  }
  function getModel(actionModel) {
    var config = ko.toJS(actionModel.config);
    return config;
  }
  ;
  return {
    createModel,
    dispose
  };
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL05vZGVCYXNlZC9Xb3JrZmxvd0FjdGlvbnMvSXNTaGFyZWRvSW5QaGFzZVdpdGhGZWF0dXJlL0lzU2hhcmVkb0luUGhhc2VXaXRoRmVhdHVyZS1mYWN0b3J5LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBDb25maWd1cmF0aW9uVHlwZSwgT2JzZXJ2YWJsZUNvbmZpZyB9IGZyb20gXCIuL0lDb25maWd1cmF0aW9uXCI7XG5cblxuaW50ZXJmYWNlIEFjdGlvbk1vZGVsIHtcbiAgICBhZGRBdmFpbGFibGVPdXRsZXQ6IGFueTtcbiAgICBjb25maWc6IE9ic2VydmFibGVDb25maWc7XG4gICAgdmFsaWRhdGlvbjoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiAoKSA9PiBib29sZWFuO1xuICAgIH07XG4gICAgYWN0aW9uTW9kZWxFcnJvckNvdW50OiBrby5QdXJlQ29tcHV0ZWQ8bnVtYmVyPjtcbiAgICB1aToge1xuICAgICAgICB3b3JrSXRlbUlkVmFyaWFibGU6IGFueTsgIC8vIEFkanVzdCB0aGUgdHlwZSBiYXNlZCBvbiB0aGUgYWN0dWFsIGltcGxlbWVudGF0aW9uXG4gICAgfTtcbiAgICB0cmFja1ZhcmlhYmxlOiAob2JzZXJ2YWJsZToga28uT2JzZXJ2YWJsZTxzdHJpbmc+LCB0eXBlOiBzdHJpbmcpID0+IGFueTtcbn1cblxuaW50ZXJmYWNlIERlZmF1bHRzIHtcbiAgICBjb25maWc6IENvbmZpZ3VyYXRpb25UeXBlO1xuICAgIGNvbm5lY3Rpb25zOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICB9O1xufVxuXG4oZnVuY3Rpb24oKVxueyBcbiAgICAgZnVuY3Rpb24gY3JlYXRlTW9kZWwoYWN0aW9uTW9kZWw6IEFjdGlvbk1vZGVsLCBhY3Rpb25PcHRpb25zOiBEZWZhdWx0cywgd2ZNb2RlbDogYW55LCBzdGVwTW9kZWw6IGFueSkge1xuICAgICAgICAvLyBSZWZlcmVuY2Ugc2VsZiBhcyB0aGUgYWN0aW9uIG1vZGVsIHdlJ3JlIGV4dGVuZGluZ1xuICAgICAgICB2YXIgc2VsZiA9IGFjdGlvbk1vZGVsO1xuXG4gICAgICAgIGxldCBjb25maWcgOiBDb25maWd1cmF0aW9uVHlwZSA9IHtcbiAgICAgICAgICAgICAgICB3b3JrSXRlbUlkVmFyaWFibGU6IFwiXCIsXG4gICAgICAgICAgICAgICAgcGhhc2VGZWF0dXJlOiBudWxsLFxuICAgICAgICB9XG4gICAgICAgIC8vIFNldHVwIG1vZGVsIGRlZmF1bHRzIGFuZCBleHRlbmQgZnJvbSBsb2FkZWQgY29uZmlnXG4gICAgICAgIHZhciBkZWZhdWx0cyA9XG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFlvdXIgY3VzdG9tIGNvbmZpZyBpcyBwYXNzZWQgaW4gdGhpcyBvYmplY3RcbiAgICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUaGUgbGlzdCBvZiBjb25uZWN0aW9ucyBhcyBwZXJzaXN0ZWRcbiAgICAgICAgICAgIGNvbm5lY3Rpb25zOiB7fVxuICAgICAgICB9O1xuICAgICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBkZWZhdWx0cywgYWN0aW9uT3B0aW9ucyk7XG5cbiAgICAgICAgLy8gRXh0ZW5kIHRoZSBhY3Rpb24gbW9kZWwgd2l0aCBjdXN0b20gbW9kZWxcbiAgICAgICAgc2VsZi5jb25maWcud29ya0l0ZW1JZFZhcmlhYmxlID0ga28ub2JzZXJ2YWJsZShvcHRpb25zLmNvbmZpZy53b3JrSXRlbUlkVmFyaWFibGUpO1xuICAgICAgICBzZWxmLmNvbmZpZy5waGFzZUZlYXR1cmUgPSBrby5vYnNlcnZhYmxlKG9wdGlvbnMuY29uZmlnLnBoYXNlRmVhdHVyZSk7XG4gICAgICAgXG5cbiAgICAgICAgLy8gRm9yY2UgdGhlIGV4ZWN1dGUgb3V0bGV0IHRvIGJlIHByZXNlbnQgLSBpZ25vcmluZyBhbnl0aGluZyBpbiB0aGVcbiAgICAgICAgLy8gcGVyc2lzdGVkIG1vZGVsICh0aGVyZSdzIGFsd2F5cyBvbmUgb3V0bGV0IGFuZCBpdCdzIGFsd2F5cyBjYWxsZWQgZXhlY3V0ZVxuICAgICAgICBzZWxmLmFkZEF2YWlsYWJsZU91dGxldChcImV4aXN0c1wiLCBcIlBoYXNlIEZlYXR1cmUgRXhpc3RzXCIpO1xuICAgICAgICBzZWxmLmFkZEF2YWlsYWJsZU91dGxldChcImRvZXNOb3RFeGlzdFwiLCBcIlBoYXNlIEZlYXR1cmUgRG9lcyBOb3QgRXhpc3RcIik7XG5cbiAgICAgICAgLy8gRXh0ZW5kIHRoZSBhY3Rpb24gbW9kZWwgdmFsaWRhdGlvblxuICAgICAgICBzZWxmLnZhbGlkYXRpb24ud29ya0l0ZW1JZFZhcmlhYmxlID0gVmFsaWRhdG9yLnJlcXVpcmVkKHNlbGYsIHNlbGYuY29uZmlnLndvcmtJdGVtSWRWYXJpYWJsZSwgXCJTcGVjaWZ5IHZhcmlhYmxlIGhvbGRpbmcgdGhlIHdvcmsgaXRlbSBpZCB0byB0cmFuc2l0aW9uXCIpO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHNlbGYudmFsaWRhdGlvbi5waGFzZUZlYXR1cmUgPSBWYWxpZGF0b3IucmVxdWlyZWQoc2VsZiwgc2VsZi5jb25maWcucGhhc2VGZWF0dXJlLCBcIlNwZWNpZnkgdGhlIHBoYXNlIGZlYXR1cmUgdG8gdHJhbnNpdGlvbiB0b1wiKTtcblxuICAgICAgICBcbiAgICAgICAgc2VsZi5hY3Rpb25Nb2RlbEVycm9yQ291bnQgPSBrby5wdXJlQ29tcHV0ZWQoKCkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGZhaWxzID0gMDtcbiAgICAgICAgICAgIGlmIChzZWxmLnZhbGlkYXRpb24ud29ya0l0ZW1JZFZhcmlhYmxlKCkpIGZhaWxzKys7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYudmFsaWRhdGlvbi5waGFzZUZlYXR1cmUoKSkgZmFpbHMrKztcbiAgICAgICAgICAgIHJldHVybiBmYWlscztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVmFyaWFibGUgc2VsZWN0b3JcbiAgICAgICAgc2VsZi51aS53b3JrSXRlbUlkVmFyaWFibGUgPSBzZWxmLnRyYWNrVmFyaWFibGUoc2VsZi5jb25maWcud29ya0l0ZW1JZFZhcmlhYmxlLCBcIi9JZGVudGlmaWVyL1dvcmsgVHlwZSBJZGVudGlmaWVyXCIpO1xuICAgIH1cblxuICAgICBmdW5jdGlvbiBkaXNwb3NlKGFjdGlvbk1vZGVsOiBBY3Rpb25Nb2RlbCkge1xuICAgICAgICB2YXIgc2VsZiA9IGFjdGlvbk1vZGVsO1xuICAgICAgICBzZWxmLnVpLndvcmtJdGVtSWRWYXJpYWJsZS5kaXNwb3NlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TW9kZWwoYWN0aW9uTW9kZWw6IEFjdGlvbk1vZGVsKVxuICAgIHtcbiAgICAgICAgLy8gdmFyIHNlbGYgPSBhY3Rpb25Nb2RlbDtcbiAgICAgICAgdmFyIGNvbmZpZyA9IGtvLnRvSlMoYWN0aW9uTW9kZWwuY29uZmlnKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRyYW5zZm9ybSBwaGFzZSBvdXRsZXRzXG4gICAgICAgXG4gICAgICBcblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBjcmVhdGVNb2RlbDogY3JlYXRlTW9kZWwsXG4gICAgICAgIGRpc3Bvc2U6IGRpc3Bvc2VcbiAgICB9O1xufSkoKTtcbiJdLAogICJtYXBwaW5ncyI6ICI7OztDQXVCQyxXQUNEO0FBQ0ssV0FBUyxZQUFZLGFBQTBCLGVBQXlCLFNBQWMsV0FBZ0I7QUFFbkcsUUFBSSxPQUFPO0FBRVgsUUFBSSxTQUE2QjtBQUFBLE1BQ3pCLG9CQUFvQjtBQUFBLE1BQ3BCLGNBQWM7QUFBQSxJQUN0QjtBQUVBLFFBQUksV0FDSjtBQUFBO0FBQUEsTUFFSTtBQUFBO0FBQUEsTUFHQSxhQUFhLENBQUM7QUFBQSxJQUNsQjtBQUNBLFFBQUksVUFBVSxFQUFFLE9BQU8sTUFBTSxDQUFDLEdBQUcsVUFBVSxhQUFhO0FBR3hELFNBQUssT0FBTyxxQkFBcUIsR0FBRyxXQUFXLFFBQVEsT0FBTyxrQkFBa0I7QUFDaEYsU0FBSyxPQUFPLGVBQWUsR0FBRyxXQUFXLFFBQVEsT0FBTyxZQUFZO0FBS3BFLFNBQUssbUJBQW1CLFVBQVUsc0JBQXNCO0FBQ3hELFNBQUssbUJBQW1CLGdCQUFnQiw4QkFBOEI7QUFHdEUsU0FBSyxXQUFXLHFCQUFxQixVQUFVLFNBQVMsTUFBTSxLQUFLLE9BQU8sb0JBQW9CLHlEQUF5RDtBQUd2SixTQUFLLFdBQVcsZUFBZSxVQUFVLFNBQVMsTUFBTSxLQUFLLE9BQU8sY0FBYyw0Q0FBNEM7QUFHOUgsU0FBSyx3QkFBd0IsR0FBRyxhQUFhLE1BQzdDO0FBQ0ksVUFBSSxRQUFRO0FBQ1osVUFBSSxLQUFLLFdBQVcsbUJBQW1CO0FBQUc7QUFDdEMsVUFBSSxLQUFLLFdBQVcsYUFBYTtBQUFHO0FBQ3hDLGFBQU87QUFBQSxJQUNYLENBQUM7QUFHRCxTQUFLLEdBQUcscUJBQXFCLEtBQUssY0FBYyxLQUFLLE9BQU8sb0JBQW9CLGtDQUFrQztBQUFBLEVBQ3RIO0FBRUMsV0FBUyxRQUFRLGFBQTBCO0FBQ3hDLFFBQUksT0FBTztBQUNYLFNBQUssR0FBRyxtQkFBbUIsUUFBUTtBQUFBLEVBQ3ZDO0FBRUEsV0FBUyxTQUFTLGFBQ2xCO0FBRUksUUFBSSxTQUFTLEdBQUcsS0FBSyxZQUFZLE1BQU07QUFNdkMsV0FBTztBQUFBLEVBQ1g7QUFBQztBQUVELFNBQU87QUFBQSxJQUNIO0FBQUEsSUFDQTtBQUFBLEVBQ0o7QUFDSixHQUFHOyIsCiAgIm5hbWVzIjogW10KfQo=
