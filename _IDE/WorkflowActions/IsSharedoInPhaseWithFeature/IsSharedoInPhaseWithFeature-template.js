"use strict";

// src/NodeBased/WorkflowActions/IsSharedoInPhaseWithFeature/IsSharedoInPhaseWithFeature-template.ts
var connections = $model.Connections;
var configuration = $model.Configuration;
var workItemId = ctx[configuration.workItemIdVariable];
if (!workItemId) {
  throw new Error("Cannot progress work item - no work item id");
}
function validate() {
  if (!configuration.phaseFeature) {
    log.Error("Phase feature is not set");
    throw new Error("Phase feature is not set");
  }
  let req = {
    "search": {
      "page": { "page": 1, "rowsPerPage": 20 },
      "sort": { "direction": "ascending", "orderBy": "title" },
      "workItemIds": [workItemId]
    },
    "enrich": [
      { "path": "title" },
      { "path": "type.systemName" },
      { "path": "reference" },
      { "path": "phase.systemName" }
    ]
  };
  log.Information("Getting matter for work item " + workItemId);
  let httpResultFindByQuery = sharedo.http.post("/api/v1/public/workItem/findByQuery", req);
  log.Information("Got matter for work item " + workItemId);
  httpResultFindByQuery.success = true;
  if (!httpResultFindByQuery.success) {
    log.Error("Error");
    log.Information(JSON.stringify(httpResultFindByQuery));
    throw new Error("Failed to jump to phase - API returned '".concat(httpResultFindByQuery.status, "'"));
  }
  if (!httpResultFindByQuery.body || httpResultFindByQuery.body.totalCount == 0) {
    log.Error("Work item ".concat(workItemId, " not found"));
    throw new Error("Work item ".concat(workItemId, " not found"));
  }
  log.Information("Work item ".concat(workItemId, " found"));
  let typeSystemName = httpResultFindByQuery.body.results[0].data["type.systemName"];
  let currentPhase = httpResultFindByQuery.body.results[0].data["phase.systemName"];
  let title = httpResultFindByQuery.body.results[0].data["title"];
  log.Information("Type system name is ".concat(typeSystemName));
  log.Information("Current phase is ".concat(currentPhase));
  log.Information("Title is ".concat(title));
  log.Information("Getting phases on type ".concat(typeSystemName, " that have feature flag ").concat(configuration.phaseFeature, " enabled"));
  let httpResultFeature = sharedo.http.get("/api/featureframework/flags/".concat(configuration.phaseFeature, "/").concat(typeSystemName, "/enabledPhases"));
  if (!httpResultFeature.success) {
    log.Error("Error getting sub features for type ".concat(typeSystemName));
    log.Information(JSON.stringify(httpResultFeature));
    throw new Error("Failed to jump to phase - API returned '".concat(httpResultFeature.status, "'"));
  }
  if (!httpResultFeature.body || httpResultFeature.body.length == 0) {
    log.Information("No features found - returning false");
    return false;
  }
  let found = httpResultFeature.body.find((phase) => phase.toLowerCase() === currentPhase.toLowerCase());
  if (!found) {
    log.Information("Current phase ".concat(currentPhase, " is not in the list of phases with feature ").concat(configuration.phaseFeature));
    return false;
  }
  log.Information("Found ".concat(configuration.phaseFeature, " on ShareDo ").concat(workItemId, " and has been used on ").concat(currentPhase, " phase"));
  return true;
}
if (validate() === true) {
  log.Information("Phase is in lis - calling connection exists");
  if (connections.exists) {
    trigger.SubProcess(connections.exists.step).Now();
  }
} else {
  log.Information("Phase is not in list - calling connection [notExists]");
  if (connections.doesNotExist) {
    trigger.SubProcess(connections.doesNotExist.step).Now();
  } else {
    log.Warning("No connection [notExists] found");
  }
}
//# sourceMappingURL=data:application/json;base64,
