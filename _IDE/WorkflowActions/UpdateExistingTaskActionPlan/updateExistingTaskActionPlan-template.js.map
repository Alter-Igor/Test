{"version":3,"file":"updateExistingTaskActionPlan-template.js","names":["log","Information","taskId","ctx","Error","existingAp","existingApId","getExistingActionPlanId","actionPlanBuilder","actions","sharedo","BuildActionPlan","ForSharedo","outputJsonOfObject","WithTitle","buildString","actionPlanItemsArray","Array","itemsAsString","items","slice","sort","a","b","Number","parseInt","order","forEach","i","description","type","actionPlanItem","buildActionPlan","push","AddItem","updateExistingTaskActionPlanItems","Build","Save","outputObject","obj","name","key","info","JSON","stringify","actionPlanModel","actionPlan","BuildActionPlanItem","WithDescription","AddCheckbox","AddInformation","AddHeader","mandatory","MarkRequired","WithOrder","callToActionVar","callToAction","Warning","cta","buildCallToAction","WithCallToAction","plan","callToActionModel","BuildCallToAction","WithDisplay","title","styles","WithStyles","CallToActionContextType","contextType","contextIdVariable","contextId","Guid","Parse","CallToActionContextId","CallToActionCommand","command","commandConfig","CallToActionCommandConfiguration","icon","CallToActionIcon","css","CallToActionCss","id","result","http","get","success","body","undefined","arrayWithRemovedIds","length","itemObj","ToString","e","item","dataItem","parse","Id","url","post","status"],"sources":["../../../src/NodeBased/WorkflowActions/UpdateExistingTaskActionPlan/updateExistingTaskActionPlan-template.ts"],"sourcesContent":["ï»¿(() => {\n    log.Information(\"---- updateExistingTaskActionPlan-template ----\");\n    let taskId = ctx[\"$model.Configuration.taskId;\"];\n    if (!taskId) {\n        throw new Error(\"Task id was not provided\");\n    }\n\n    log.Information(\"taskId: \" + taskId);\n\n    let existingAp = false; \n    let existingApId = getExistingActionPlanId(taskId);\n    log.Information(\"getExistingActionPlanId(taskId) : \" + existingApId);\n\n    if (existingApId) {\n        existingAp = true\n    }\n\n    // outputObject(actions.sharedo.WithSharedo(taskId), \"actions.sharedo.WithSharedo(taskId)\");\n    // outputObject(actions.sharedo.BuildActionPlan(), \"actions.sharedo.BuildActionPlan()\");\n    // outputObject(actions.sharedo.BuildActionPlan().ForSharedo(taskId), \"actions.sharedo.BuildActionPlan().ForSharedo(taskId)\");\n    // outputObject(actions.sharedo.BuildActionPlan().ForSharedo(taskId).ForExistingActionPlan(), \"actions.sharedo.BuildActionPlan().ForSharedo(taskId).ForExistingActionPlan()\");\n\n\n    //create the action plan builder\n    let actionPlanBuilder = actions.sharedo.BuildActionPlan().ForSharedo(taskId);\n    outputJsonOfObject(actionPlanBuilder, \"actionPlanBuilder\");\n\n   // if (existingAp === false) {\n        log.Information(\"No existing action plan found so creation one\");\n        actionPlanBuilder.WithTitle(sharedo.buildString(\"$model.Configuration.actionPlanTitle;\"));\n    //}\n    //else {\n        //!Warning - this code doesnt seem to work\n        //ended up using the API to post a update\n        //log.Information(\"Existing action plan found so updating\" + existingApId);\n        //actionPlanBuilder = actionPlanBuilder.ForExistingActionPlan();\n        // outputActionPlan(actionPlanBuilder);\n    //}\n\n    //used to build action plan items for existing action plan\n    let actionPlanItemsArray = new Array<any>();\n\n    // Add action plan items\n    // $ifNotNull.Configuration.actionPlanItemsList\n    {\n        let itemsAsString = ctx[\"$model.Configuration.actionPlanItemsList\"] as IActionPlan[];\n        outputJsonOfObject(itemsAsString, \"Variable: $model.Configuration.actionPlanItemsList\");\n\n        if (itemsAsString) {\n            let items = itemsAsString;//JSON.parse(itemsAsString) as Array<any>;\n            items.slice()\n                .sort((a, b) => Number.parseInt(a.order, 10) - Number.parseInt(b.order, 10))\n                .forEach(function (i) {\n                    log.Information('Adding Action Plan Item:');\n                    log.Information('- description: ' + i.description);\n                    log.Information('- type: ' + i.type);\n                    log.Information('- order: ' + i.order);\n                    log.Information('**********');\n                    let actionPlanItem = buildActionPlan(i);\n                    //Add to array to be used to update existing action plan\n                    actionPlanItemsArray.push(actionPlanItem);\n                    actionPlanBuilder = actionPlanBuilder.AddItem(actionPlanItem);\n                });\n        }\n    }\n    // $endif\n\n    if (existingAp === true) {\n        log.Information(\"----- Update Existing via API -------\");\n        outputJsonOfObject(actionPlanItemsArray, \"actionPlanItemsArray\");\n        updateExistingTaskActionPlanItems(taskId, actionPlanItemsArray);\n    }\n    else {\n        log.Information(\"----- Save New Action Plan -------\");\n        actionPlanBuilder = actionPlanBuilder.Build();\n        actionPlanBuilder.Save();\n    }\n\n    log.Information(\"---- updateExistingTaskActionPlan-template finished ----\");\n\n\n    function outputObject(obj: any, name: string) {\n        log.Information(\"\");\n        log.Information(\"----- Obj[\" + name + \"] -------\");\n        for (let key in obj) {\n            if (typeof obj[key] === 'function') {\n                log.Information(\"function \" + key);\n                let info = JSON.stringify(obj[key]);\n                if (typeof info === 'string') {\n                    log.Information(info);\n                }\n            }\n            else {\n                log.Information(key + \" : \" + obj[key]);\n                log.Information(JSON.stringify(obj[key]));\n            }\n        }\n        log.Information(\"----- Obj End \" + name + \"-------\");\n        log.Information(\"\");\n    }\n\n    function outputJsonOfObject(obj: any, name: string) {\n        log.Information(\"************- \" + name + \" -****************\");\n        log.Information(JSON.stringify(obj));\n        log.Information(\"***********************************************\");\n    };\n\n    function buildActionPlan(actionPlanModel: IActionPlan): any {\n        log.Information(\"*** function buildActionPlan()\");\n        let actionPlan = actions.sharedo.BuildActionPlanItem();\n\n        actionPlan = actionPlan.WithDescription(actionPlanModel.description);\n\n        let type = actionPlanModel.type;\n\n        if (type === \"checkbox\") {\n            actionPlan = actionPlan.AddCheckbox();\n        }\n\n        if (type === \"infobox\") {\n            actionPlan = actionPlan.AddInformation();\n        }\n\n        if (type === \"header\") {\n            actionPlan = actionPlan.AddHeader();\n        }\n\n        if (actionPlanModel.mandatory) {\n            actionPlan = actionPlan.MarkRequired();\n        }\n\n        let order = actionPlanModel.order;\n        actionPlan = actionPlan.WithOrder(order);\n\n\n        if (actionPlanModel.callToActionVar) {\n            let callToAction = actionPlanModel.callToActionVar;\n            if (!callToAction) {\n                log.Warning(\"Create action plan - a call to action variable ($model.Configuration.callToActionVar) was specified but was empty\");\n            }\n            else {\n                let cta = buildCallToAction(callToAction);\n                actionPlan = actionPlan.WithCallToAction(cta);\n            }\n        }\n\n\n        let plan = actionPlan.Build();\n        log.Information(\"*** function buildActionPlan() finished\");\n        return plan;\n\n    }\n\n\n\n\n    function buildCallToAction(callToActionModel: ICallToAction): any | undefined {\n        log.Information(\"*********** function buildCallToAction() *****************\");\n        log.Information(\"************-Data-****************\");\n        log.Information(JSON.stringify(callToActionModel));\n        log.Information(\"****************************\");\n        let cta = actions.sharedo\n            .BuildCallToAction()\n            .WithDisplay(callToActionModel.title);\n        if (callToActionModel.styles) {\n            cta = cta.WithStyles(callToActionModel.styles);\n        }\n        cta = cta.Build();\n\n        cta.CallToActionContextType = callToActionModel.contextType\n\n\n        log.Information(\"ContextIdVariable: \" + callToActionModel.contextIdVariable);\n        if (callToActionModel.contextIdVariable) {\n            let contextId = ctx[callToActionModel.contextIdVariable];\n            if (contextId) {\n\n                log.Information(`typeof contextId: ${typeof contextId}`);\n                if (typeof contextId === 'string') {\n                    contextId = Guid.Parse(contextId);\n                }\n\n                log.Information(\"ContextId: \" + contextId);\n                cta.CallToActionContextId = contextId;\n                log.Information(\"cta.CallToActionContextId: \" + cta.CallToActionContextId);\n            }\n            else {\n                log.Warning(`ContextIdVariable: ${callToActionModel.contextIdVariable} was not found in the context`);\n            }\n        }\n\n\n        cta.CallToActionCommand = callToActionModel.command;\n\n        // ifNotNull.Configuration.commandConfig\n        if (callToActionModel.commandConfig) {\n            cta.CallToActionCommandConfiguration = callToActionModel.commandConfig;\n        }\n        // endif\n\n        // ifNull.Configuration.commandConfig\n        if (!callToActionModel.commandConfig) {\n            cta.CallToActionCommandConfiguration = \"{}\";\n        }\n        // endif\n\n        // ifNotNull.Configuration.icon\n        if (callToActionModel.icon) {\n            cta.CallToActionIcon = callToActionModel.icon;\n        }\n        // endif;    \n\n        // ifNotNull.Configuration.css\n        if (callToActionModel.css) {\n            cta.CallToActionCss = callToActionModel.css;\n        }\n        // endif;\n        log.Information('**** buildCallToAction finished ****');\n        return cta;\n    }\n\n    function getExistingActionPlanId(id: string) {\n        let result: IShareDoGetResponse<IShareDoActionPlan> = sharedo.http.get(`/api/sharedo/${id}/actionplan`);\n        //log.Information(\"result: \" + JSON.stringify(result));\n        if (result.success) {\n            //log.Information(\"result.body: \" + JSON.stringify(result.body));\n            if (result.body && result.body.id) {\n                //log.Information(\"result.body.id: \" + result.body.id);\n                return result.body.id;\n            }\n        }\n        return undefined;\n    }\n  \n    function updateExistingTaskActionPlanItems(id: string, actionPlanBuilder: any) {\n       \n        log.Information(\"updateExistingTaskActionPlanItems\");\n        \n        //remove Ids from action plan items\n        //have to build a new array as we cannot delete Id from the passed in actionPlanBuilder\n        //Object does not support dynamic members \n        let arrayWithRemovedIds = new Array<any>();\n\n        //Loop though the new action plan items and remove the Ids\n        //add the new items with the removed ids to the new array\n        for(let i = 0; i < actionPlanBuilder.length; i++){\n\n            let itemObj = actionPlanBuilder[i];\n            //get the CallToActionContextId as stringify looses it\n            let CallToActionContextId : undefined;\n            \n            try{\n            CallToActionContextId= itemObj.CallToActionContextId.ToString();\n            log.Information(\"CallToActionContextId: \" + CallToActionContextId);\n            }\n            catch(e){\n                log.Information(\"CallToActionContextId not found\");\n            }\n\n            \n            \n            let item = JSON.stringify(actionPlanBuilder[i]);\n            log.Information(\"item: \" + item);\n            let dataItem = JSON.parse(item);\n            if(CallToActionContextId)\n            {\n                dataItem.CallToActionContextId = CallToActionContextId; //put back CTA Id\n            }\n            if(dataItem.Id)\n            {\n                log.Information(typeof dataItem.Id);\n                delete dataItem.Id; //remove or post fails\n            }\n            arrayWithRemovedIds.push(dataItem);\n        }\n\n        outputJsonOfObject(arrayWithRemovedIds, \"Action Plan Items To Be Added To Existing Action Plan\");\n        let url = `/api/sharedo/${id}/actionplan/items`;\n        log.Information(\"Posting to url: \" + url);\n        let result: IShareDoGetResponse<IShareDoActionPlan> = sharedo.http.post(url, arrayWithRemovedIds);\n        outputJsonOfObject(result, \"result\");\n        if (result.status===\"Created\") {\n            log.Information(\"update success: \" + JSON.stringify(result.body));\n        }\n        else {\n            log.Information(\"update failed: \" + JSON.stringify(result));\n        }\n    }\n})();"],"mappings":"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"}