// runtime can't be in strict mode because a global variable is assign and maybe created.
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkAspects"] = self["webpackChunkAspects"] || []).push([["/dist/DatePickerAspect/DatePickerAspect"],{

/***/ "../../WebBased/IDEAspects/DatePickerAspect/DatePickerAspect.ts":
/*!**********************************************************************!*\
  !*** ../../WebBased/IDEAspects/DatePickerAspect/DatePickerAspect.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatePickerAspect: () => (/* binding */ DatePickerAspect)\n/* harmony export */ });\n/* harmony import */ var _eonasdan_tempus_dominus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @eonasdan/tempus-dominus */ \"../../../node_modules/@eonasdan/tempus-dominus/dist/js/tempus-dominus.esm.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"../../node_modules/uuid/dist/esm-browser/v4.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\nvar thisWidgetSystemName = \"DatePickerAspect\";\n//add style to head: https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css\ndocument.head.insertAdjacentHTML(\"beforeend\", \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/icon?family=Material+Icons\\\">\");\nvar DatePickerAspect = /*#__PURE__*/function () {\n  function DatePickerAspect(element, configurationWithHost, baseModel) {\n    var _this = this;\n    _classCallCheck(this, DatePickerAspect);\n    var _a, _b, _c, _d, _e;\n    this.firedEvents = [];\n    this.monitoredHandlers = [];\n    this.readyForSave = false;\n    var defaults = {\n      // Aspect widget config parameters\n      debug: {\n        enabled: false,\n        logToConsole: false,\n        showEvents: false,\n        showInAspect: false\n      }\n    };\n    this.options = $.extend(true, {}, defaults, configurationWithHost);\n    this.configuration = this.options;\n    this.blade = configurationWithHost._host.blade;\n    this.hostModel = configurationWithHost._host.model;\n    this.host = configurationWithHost._host;\n    this.model = {\n      // This is referencing a standard observable item from the main model\n      title: (_b = (_a = configurationWithHost._host) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.title,\n      // This is the configured message against the aspect instance\n      saveRuns: 0\n    };\n    this.log(\"----> Constructing\", 'background: #222; color: #bada55', configurationWithHost);\n    // if (this.model.eventToFireSaveOn) {\n    //     this.disposables = [\n    //         $ui.events.subscribe(this.model.eventToFireSaveOn, this.save, this)\n    //     ];\n    // }\n    // Every widget gets this\n    this.enabled = configurationWithHost._host.blade.enabled;\n    this.instanceId = (_c = this.hostModel) === null || _c === void 0 ? void 0 : _c.instanceId;\n    this.element = element;\n    this.blade = configurationWithHost._host.blade;\n    this.parentSharedoId = (_d = this.hostModel) === null || _d === void 0 ? void 0 : _d.parentSharedoId;\n    this.toolbarContext = configurationWithHost._host.toolbarContext;\n    this.burgerContext = configurationWithHost._host.burgerContext;\n    this.sharedoId = (_e = this.hostModel) === null || _e === void 0 ? void 0 : _e.id;\n    this.reloading = false;\n    this.sharedoTypeSystemName = this.blade.model.sharedoTypeSystemName();\n    this.currentPhaseSystemName = this.blade.model.phaseSystemName;\n    if (this.currentPhaseSystemName !== undefined) {\n      this.currentPhaseSystemName.subscribe(function () {\n        _this.log(\"Current Phase Changed\", \"red\", _this.currentPhaseSystemName());\n        _this.loadAndBind();\n      });\n    }\n    ;\n    //add backgroundColor to element css var\n    this.pickerId = (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().toString();\n    this.addDebugIfRequired();\n  }\n  _createClass(DatePickerAspect, [{\n    key: \"formbuilder\",\n    value: function formbuilder() {\n      return this.blade.model.aspectData.formBuilder.formData;\n    }\n    /**\n     * Called by the UI framework after initial creation and binding to load data\n     * into it's model\n     */\n  }, {\n    key: \"loadAndBind\",\n    value: function loadAndBind() {\n      var _this2 = this;\n      if (this.element === undefined) {\n        return;\n      }\n      var element = this.element.querySelector(\".IDEAspects-DatePickerAspect\");\n      if (!element) {\n        this.log(\"No element found\", \"red\");\n        return;\n      }\n      // <div class=\"log-event\" id=\"datetimepicker1\"></div>\n      var div = document.createElement(\"div\");\n      div.classList.add(\"log-event\");\n      div.id = this.pickerId;\n      element.appendChild(div);\n      this.dateTimePicker = new _eonasdan_tempus_dominus__WEBPACK_IMPORTED_MODULE_0__.TempusDominus(div, {\n        display: {\n          inline: true,\n          sideBySide: true\n        }\n      });\n      var data = this.formbuilder();\n      this.log(\"Data\", \"red\", data);\n      var date = this.convertToLocalDate(data.eDiscoveryUpdatePlannedDate);\n      var parsedDate = this.dateTimePicker.dates.parseInput(date);\n      //if multipleDates is false, the second parameter is not required.\n      this.dateTimePicker.dates.setValue(parsedDate, this.dateTimePicker.dates.lastPickedIndex);\n      this.dateTimePicker.subscribe(\"change.td\", function (e) {\n        _this2.log(\"Date Changed\", \"red\", e);\n        _this2.onSave();\n      });\n    }\n  }, {\n    key: \"convertToLocalDate\",\n    value: function convertToLocalDate(datestr) {\n      var date = new Date(Date.parse(datestr));\n      return new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000);\n    }\n  }, {\n    key: \"convertToSysDate\",\n    value: function convertToSysDate(date) {\n      if (!date) {\n        return new Date();\n      }\n      return new Date(date.getTime() - date.getTimezoneOffset() * 60 * 1000);\n    }\n  }, {\n    key: \"load\",\n    value: function load(model) {\n      this.log(\"Load\");\n    }\n  }, {\n    key: \"reload\",\n    value: function reload(model) {\n      this.log(\"Reload\");\n    }\n  }, {\n    key: \"onSave\",\n    value: function onSave() {\n      var _a;\n      this.log(\"----> Running Save\", 'background: #222; color: #bada55');\n      var data = this.formbuilder();\n      this.log(\"Data\", \"red\", data);\n      //+date.getTimezoneOffset()*60*1000\n      data.eDiscoveryUpdatePlannedDate = this.convertToSysDate((_a = this.dateTimePicker) === null || _a === void 0 ? void 0 : _a.dates.picked[0]).toISOString();\n    }\n  }, {\n    key: \"log\",\n    value: function log(message, color, data) {\n      var _a;\n      if ((_a = this.configuration.debug) === null || _a === void 0 ? void 0 : _a.enabled) {\n        if (this.configuration.debug.logToConsole) {\n          console.log(\"%c \".concat(thisWidgetSystemName, \" - \").concat(message), color, data);\n        }\n      }\n    }\n  }, {\n    key: \"addDebugIfRequired\",\n    value: function addDebugIfRequired() {\n      var _a;\n      if ((_a = this.configuration.debug) === null || _a === void 0 ? void 0 : _a.enabled) {\n        window.aspectDebug = window.aspectDebug || {};\n        window.aspectDebug[thisWidgetSystemName] = this;\n      }\n    }\n  }]);\n  return DatePickerAspect;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../WebBased/IDEAspects/DatePickerAspect/DatePickerAspect.ts\n");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["/dist/DatePickerAspect/vendor"], () => (__webpack_exec__("../../WebBased/IDEAspects/DatePickerAspect/DatePickerAspect.ts")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ var __webpack_export_target__ = (Aspects = typeof Aspects === "undefined" ? {} : Aspects);
/******/ for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ }
]);