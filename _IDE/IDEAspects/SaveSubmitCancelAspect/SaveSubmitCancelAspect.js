(()=>{var e={d:(t,o)=>{for(var s in o)e.o(o,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:o[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};(()=>{"use strict";e.r(t),e.d(t,{SaveSubmitCancel:()=>d});var o=function(e,t,o,s){return new(o||(o=Promise))((function(n,i){function a(e){try{r(s.next(e))}catch(e){i(e)}}function l(e){try{r(s.throw(e))}catch(e){i(e)}}function r(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,l)}r((s=s.apply(e,t||[])).next())}))};const s=function(e){return t=this,s=void 0,i=function*(){return function(e){return o(this,void 0,void 0,(function*(){return function(e,t,s){return o(this,void 0,void 0,(function*(){let o=function(e){let t=window.document.location.origin;return-1===e.indexOf(t)&&(0!==e.indexOf("/")&&(e="/"+e),e=t+e),e}(e),n=function(){let e=(o=function(){let e={};return document.cookie.split(";").reduce((function(t,o){var s=o.split("=");if(2===s.length){var n=s[0].trim(),i=s[1];e[n]=i}return t}),{}),e}()._api)?"Bearer "+o:null,t=new Headers;var o;return t.append("Content-Type","application/json"),e&&t.append("Authorization",e),t}();return yield fetch(o,{method:t,headers:n,body:s?JSON.stringify(s):void 0}).then((e=>{var t;if(console.log(e),-1===(null===(t=e.headers.get("content-type"))||void 0===t?void 0:t.indexOf("application/json")))throw new Error("Response was not JSON");return e.json()}))}))}(e,"GET",void 0)}))}(`/api/modeller/sharedoTypes/${e}/phasePlan`).then((e=>{if(console.log("%c loadWorkItem","color: #ff0000"),console.log(e),e)return e;throw new Error("Not found")})).catch((e=>{console.error("Error:",e)}))},new((n=void 0)||(n=Promise))((function(e,o){function a(e){try{r(i.next(e))}catch(e){o(e)}}function l(e){try{r(i.throw(e))}catch(e){o(e)}}function r(t){var o;t.done?e(t.value):(o=t.value,o instanceof n?o:new n((function(e){e(o)}))).then(a,l)}r((i=i.apply(t,s||[])).next())}));var t,s,n,i},n=ko;var i;function a(e,t,o){let s=[],i=0;return e.forEach((e=>{let a=t.find((t=>t.systemName===e.toPhaseSystemName));if(!a)return;i++;let r={id:e.systemName,order:i,text:e.name,icon:a.iconClass||"",color:a.colour||"",enabled:n.observable(!0),visible:!0,onClick:o.onClick,tooltip:a.description||`Progress to ${a.name} phase`,type:l(e,a),isOptimumPath:e.isOptimumPath,isSystemClosedPhase:a.isSystemClosedPhase,isRemoved:a.isRemoved,isOpen:a.isOpen,isStart:a.isStart,isReportable:a.isReportable};s.push(r)})),console.log(s),s}function l(e,t){let o=i.primary;return!1===e.isOptimumPath&&(o=i.secondary),!0===t.isRemoved&&(o=i.destrustive),!0===t.isSystemClosedPhase&&(o=i.primary),o}!function(e){e.destrustive="destructive",e.primary="primary",e.secondary="secondary",e.save="save",e.cancel="cancel"}(i||(i={}));let r="SaveSubmitCancelAspect";class d{constructor(e,t,o){var s,i,a,l,r;this.monitorHandlers(),this.firedEvents=[],this.monitoredHandlers=[],this.readyForSave=!1;let d=$.extend(!0,{},{debug:{enabled:!1,logToConsole:!1,showEvents:!1,showInAspect:!1}},t);this.blade=t._host.blade,this.hostModel=t._host.model,this.model={title:null===(i=null===(s=t._host)||void 0===s?void 0:s.model)||void 0===i?void 0:i.title,saveRuns:0,debug:d.debug},this.phasePlan=n.observable(void 0),this.phasePlan.subscribe(this.handlePhasePlanChange.bind(this)),this.log("Init","background: #222; color: #bada55"),this.enabled=t._host.blade.enabled,this.instanceId=null===(a=this.hostModel)||void 0===a?void 0:a.instanceId,this.element=e,this.blade=t._host.blade,this.parentSharedoId=null===(l=this.hostModel)||void 0===l?void 0:l.parentSharedoId,this.toolbarContext=t._host.toolbarContext,this.burgerContext=t._host.burgerContext,this.sharedoId=null===(r=this.hostModel)||void 0===r?void 0:r.id,this.reloading=!1,this.sharedoTypeSystemName=this.blade.model.sharedoTypeSystemName(),this.currentPhaseSystemName=this.blade.model.phaseSystemName(),this.addDebugIfRequired()}handlePhasePlanChange(e){if(this.log("Phase Plan Changed","red",e),!e)return;let t;if(void 0!==this.currentPhaseSystemName&&void 0!==this.currentPhaseSystemName())t=e.transitions.filter((e=>e.fromPhaseSystemName==this.currentPhaseSystemName()));else{let o=e.phases.find((e=>1==e.isStart));if(!o)return void this.log("No Start Phase","red");t=e.transitions.filter((e=>e.fromPhaseSystemName==(null==o?void 0:o.systemName)))}let o={onClick:e=>{this.log("Transition Clicked","red",e)}};this.buttonGroupElement&&this.buttonGroupElement.remove(),this.log("Transitions to convert","green",t.length);let s={order:0,enabled:n.observable(!0),showTitle:n.observable(!0),name:n.observable("System"),buttons:this.createSystemButtons()},i={order:1,enabled:this.blade.isValid,showTitle:n.observable(!0),name:n.observable("Phase Plan"),buttons:a(t,e.phases,o)};this.buttonGroups=[i,s],this.buttonGroupElement=function(e,t){let o=document.createElement("div");return o.classList.add("button-groups"),e.sort(((e,t)=>e.order-t.order)).forEach((e=>{const t=document.createElement("div");let s=e.name().replace(/[^a-zA-Z0-9]/g,"");t.classList.add("button-group"),t.classList.add(s),e.enabled.subscribe((e=>{t.classList.toggle("disabled",!e)}));let n=function(e,t){const o=document.createElement("div");if(o.classList.add("buttons"),!e||0===e.length){let e=document.createElement("div");return e.innerText="No Transitions Available",o.appendChild(e),o}return function(e){e.forEach((e=>{e.id||(e.id="button_"+e.order)}))}(e),e.sort(((e,t)=>e.order-t.order)).forEach((e=>{const t=document.createElement("button");t.classList.add("btn"),t.classList.add(e.type),t.id=e.id||"button_"+e.order,t.innerText=e.text,t.addEventListener("click",e.onClick),t.disabled=!e.enabled(),t.style.display=e.visible?"block":"none",t.title=e.tooltip,function(e,t){e.isOpen&&t.classList.add("toPhaseOpen"),e.isStart&&t.classList.add("toPhaseStart"),e.isReportable&&t.classList.add("toPhaseReportable"),e.isRemoved&&t.classList.add("toPhaseRemoved"),e.isSystemClosedPhase&&t.classList.add("toPhaseSystemClosedPhase"),e.isOptimumPath&&t.classList.add("toPhaseOptimumPath")}(e,t),e.enabled.subscribe((o=>{t.disabled=!o,function(e,t,o){let s="0 8px 8px -4px lightgray",n="0px 0px 17px 4px lightgray";e.color&&(s=`0 8px 8px -4px ${e.color}`,n=`0px 0px 17px 4px ${e.color}`),t?(o.style.boxShadow=s,o.onmouseover=function(){o.style.boxShadow=n},o.onmouseout=function(){o.style.boxShadow=s}):(o.style.boxShadow="",o.onmouseover=function(){o.style.boxShadow=""},o.onmouseout=function(){o.style.boxShadow=""})}(e,o,t)}));const s=document.createElement("span");s.classList.add("icon"),s.classList.add("fa"),s.classList.add(e.icon),s.classList.add("fa-xl"),t.appendChild(s),o.appendChild(t)})),o}(e.buttons);t.appendChild(n),o.appendChild(t)})),o}(this.buttonGroups,this.blade),this.saveSubmitCancelElement=this.element.querySelector(".save-submit-cancel"),this.saveSubmitCancelElement?this.saveSubmitCancelElement.appendChild(this.buttonGroupElement):this.log("Save Submit Cancel Element Not Found","red")}createSystemButtons(){let e=[],t={order:1,text:"Save",onClick:()=>{this.saveClicked()},id:"",icon:"fa-save",enabled:n.observable(!0),visible:!0,tooltip:"Save the current record",type:i.save,color:void 0,isOptimumPath:!1,isSystemClosedPhase:!1,isRemoved:!1,isOpen:!1,isStart:!1,isReportable:!1};e.push(t);let o={order:2,text:"Cancel",onClick:()=>{this.saveClicked()},id:"",icon:"fa-times",enabled:n.observable(!0),visible:!0,tooltip:"Cancel the current record",type:i.cancel,color:void 0,isOptimumPath:!1,isSystemClosedPhase:!1,isRemoved:!1,isOpen:!1,isStart:!1,isReportable:!1};return e.push(o),e}loadAndBind(){this.log("Load And Bind"),this.sharedoTypeSystemName?s(this.sharedoTypeSystemName).then((e=>{this.log("Phase Plan Loaded","red",e),this.phasePlan(e)})):this.log("No Sharedo Type Name")}load(e){this.log("Load")}reload(e){this.log("Reload")}saveClicked(){}save(){}runSaveWithNoValidation(){}areAllAspectsLoaded(){}saveCompleted(){}monitorHandlers(e){}addSubscription(e){}log(e,t,o){var s;(null===(s=this.model.debug)||void 0===s?void 0:s.enabled)&&this.model.debug.logToConsole&&console.log(`%c ${r} - ${e}`,t,o)}addDebugIfRequired(){var e,t;(null===(t=null===(e=this.model)||void 0===e?void 0:e.debug)||void 0===t?void 0:t.enabled)&&(window.aspectDebug=window.aspectDebug||{},window.aspectDebug[r]=this)}}})();var o=Aspects="undefined"==typeof Aspects?{}:Aspects;for(var s in t)o[s]=t[s];t.__esModule&&Object.defineProperty(o,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,