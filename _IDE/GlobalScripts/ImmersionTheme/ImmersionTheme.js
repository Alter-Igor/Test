(()=>{var e=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o={};(()=>{"use strict";e(o);var n=function(e,o,n,t){return new(n||(n=Promise))((function(i,r){function a(e){try{l(t.next(e))}catch(e){r(e)}}function s(e){try{l(t.throw(e))}catch(e){r(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof n?o:new n((function(e){e(o)}))).then(a,s)}l((t=t.apply(e,o||[])).next())}))};function t(e){return n(this,void 0,void 0,(function*(){return i(e,"GET",void 0)}))}function i(e,o,t){return n(this,void 0,void 0,(function*(){let n=function(e){let o=window.document.location.origin;return-1===e.indexOf(o)&&(0!==e.indexOf("/")&&(e="/"+e),e=o+e),e}(e),i=function(){let e=(n=function(){let e={};return document.cookie.split(";").reduce((function(o,n){var t=n.split("=");if(2===t.length){var i=t[0].trim(),r=t[1];e[i]=r}return o}),{}),e}()._api)?"Bearer "+n:null,o=new Headers;var n;return o.append("Content-Type","application/json"),e&&o.append("Authorization",e),o}();return yield fetch(n,{method:o,headers:i,body:t?JSON.stringify(t):void 0}).then((e=>{var o;if(console.log(e),-1===(null===(o=e.headers.get("content-type"))||void 0===o?void 0:o.indexOf("application/json")))throw new Error("Response was not JSON");return e.json()}))}))}var r=function(e,o,n,t){return new(n||(n=Promise))((function(i,r){function a(e){try{l(t.next(e))}catch(e){r(e)}}function s(e){try{l(t.throw(e))}catch(e){r(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof n?o:new n((function(e){e(o)}))).then(a,s)}l((t=t.apply(e,o||[])).next())}))};let a=document.querySelector(".navbar-brand");function s(){if(!$ui.pageContext.user)return void setTimeout((()=>{console.log("retry..."),s()}),1);let e=$ui.pageContext.user.userid();console.log("currentUserOdsId",e),t(`/api/ods/teams/person/${e}/primaryTeam`).then((o=>r(this,void 0,void 0,(function*(){console.log(`/api/ods/teams/person/${e}/primaryTeam`,o);let a=o.primaryTeam,s=a.organisationId;console.log("organisationId",s);let d=a.parentTeamId;console.log("parentTeamId",d);let c=a.id;console.log("teamId",c),function(e,o){return n(this,void 0,void 0,(function*(){return i("/api/v1/public/workItem/findByQuery","POST",o)}))}(0,{search:{page:{page:1,rowsPerPage:20},sort:{direction:"ascending",orderBy:"title"},types:{includeTypesDerivedFrom:["immersion-organization"]},roles:[{role:"immersion-related-to",subjectIdsHoldingRole:[c]}]},enrich:[{path:"title"},{path:"reference"},{path:"form-immersion-organisation.organizationThemeSystemName"}]}).then((e=>r(this,void 0,void 0,(function*(){if(console.log("/api/v1/public/workItem/findByQuery",e),!e||!e.results||!e.results[0])return void console.log("findByQuery: Nothing Found");let o=e.results[0];if(console.log("findByQuery: data",o),!o.data)return void console.log("findByQuery: No Data");let n=o.data["form-immersion-organisation.organizationThemeSystemName"];console.log("form-immersion-organisation.organizationThemeSystemName",n),n&&""!=n?(function(e){r(this,void 0,void 0,(function*(){let o=$ui.widgets.instances().find((e=>"Sharedo.Core.Case.Widgets.Logo"==e.base.systemName));console.log("Sharedo.Core.Case.Widgets.Logo",o),console.log("portalBrandLogoUrl <-- ",`/themes/${e}/images/portal-brand-logo`),$ui.pageContext.portalBrandLogoUrl(`/themes/${e}/images/portal-brand-logo`),console.log("$ui.widgets.create(Sharedo.Core.Case.Widgets.Logo)"),$ui.widgets.create("Sharedo.Core.Case.Widgets.Logo",o.base.id,{defaultLogo:"/theme/images/logo.png"},{id:o.base.id,systemName:"Sharedo.Core.Case.Widgets.Logo",canExpandCollapse:!0,isExpanded:!0,icon:null,title:"Logo",helpText:null})}))}(n),yield function(e){return r(this,void 0,void 0,(function*(){console.log("applyOrganisationTheme()...."),t(`/api/themes/bySystemName/${e}`).then((o=>{console.log(`/api/themes/bySystemName/${e}`,o);let n=JSON.parse(o.jsonConfig);console.log("r.jsonConfig",n),n.settings.forEach((e=>{"css-var"==e.type&&(console.log("css-var",e),document.documentElement.style.setProperty("--"+e.key,e.value)),"data-attr"==e.type&&(console.log("data-attr",e),document.documentElement.setAttribute("data-theme-"+e.key,e.value))})),console.log("...Done...")}))}))}(n)):console.log("No Theme")})))).finally((()=>{l()}))})))).finally((()=>{})).catch((e=>{console.log("Error",e),l()}))}function l(){a.classList.add("loaded")}document.addEventListener("DOMContentLoaded",(()=>{s()}))})();var n=Globals="undefined"==typeof Globals?{}:Globals;for(var t in o)n[t]=o[t];o.__esModule&&Object.defineProperty(n,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,