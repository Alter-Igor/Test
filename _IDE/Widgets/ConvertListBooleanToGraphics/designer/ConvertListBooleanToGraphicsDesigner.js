(()=>{var e={d:(o,t)=>{for(var r in t)e.o(t,r)&&!e.o(o,r)&&Object.defineProperty(o,r,{enumerable:!0,get:t[r]})},o:(e,o)=>Object.prototype.hasOwnProperty.call(e,o),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},o={};(()=>{"use strict";e.r(o),e.d(o,{ConvertListBooleanToGraphicsDesigner:()=>r,ConvertListBooleanToGraphicsDesignerClass:()=>s});const t=ko;function r(e,o,t){return new s(e,o,t)}class s{constructor(e,o,r){const s=$.extend(!0,{},{todoMessage:""},o);this.model={todoMessage:t.observable(s.todoMessage)},this.validation={todoMessage:t.pureComputed((()=>{var e;return(null===(e=this.model)||void 0===e?void 0:e.todoMessage())?null:"The message is required"}))},this.validationErrorCount=t.pureComputed((()=>{let e=0;return this.validation.todoMessage()&&e++,e}))}onDestroy(){}loadAndBind(){}getModel(){return{todoMessage:this.model.todoMessage()}}}})();var t=Widgets="undefined"==typeof Widgets?{}:Widgets;for(var r in o)t[r]=o[r];o.__esModule&&Object.defineProperty(t,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzaWduZXIvQ29udmVydExpc3RCb29sZWFuVG9HcmFwaGljc0Rlc2lnbmVyLmpzIiwibWFwcGluZ3MiOiJNQUNBLElBQUlBLEVBQXNCLENDQTFCQSxFQUF3QixDQUFDQyxFQUFTQyxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hGLEVBQW9CSSxFQUFFRixFQUFZQyxLQUFTSCxFQUFvQkksRUFBRUgsRUFBU0UsSUFDNUVFLE9BQU9DLGVBQWVMLEVBQVNFLEVBQUssQ0FBRUksWUFBWSxFQUFNQyxJQUFLTixFQUFXQyxJQUUxRSxFQ05ESCxFQUF3QixDQUFDUyxFQUFLQyxJQUFVTCxPQUFPTSxVQUFVQyxlQUFlQyxLQUFLSixFQUFLQyxHQ0NsRlYsRUFBeUJDLElBQ0gsb0JBQVhhLFFBQTBCQSxPQUFPQyxhQUMxQ1YsT0FBT0MsZUFBZUwsRUFBU2EsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEWCxPQUFPQyxlQUFlTCxFQUFTLGFBQWMsQ0FBRWUsT0FBTyxHQUFPLEcsbUlDTDlELE1BQU0sRUFBK0JDLEdDRzlCLFNBQVNDLEVBQXFDQyxFQUFzQkMsRUFBb0JDLEdBQzNGLE9BQU8sSUFBSUMsRUFBMENILEVBQVNDLEVBQWVDLEVBQ2pGLENBZU8sTUFBTUMsRUFLVEMsWUFBWUosRUFBc0JDLEVBQThCQyxHQUU1RCxNQUlNRyxFQUFVQyxFQUFFQyxRQUFPLEVBQU0sQ0FBQyxFQUpmLENBQ2JDLFlBQWEsSUFHNEJQLEdBRTdDUSxLQUFLQyxNQUFRLENBQ1RGLFlBQWEsYUFBY0gsRUFBUUcsY0FHdkNDLEtBQUtFLFdBQWEsQ0FDZEgsWUFBYSxnQkFBZ0IsSyxNQUd6QixPQUQwQixRQUFWLEVBQUFDLEtBQUtDLGFBQUssZUFBRUYsZUFFckIsS0FEYyx5QkFDVixLQUluQkMsS0FBS0cscUJBQXVCLGdCQUFnQixLQUN4QyxJQUFJQyxFQUFRLEVBRVosT0FESUosS0FBS0UsV0FBV0gsZUFBZUssSUFDNUJBLENBQUssR0FFcEIsQ0FFQUMsWUFFQSxDQUVBQyxjQUVBLENBRUFDLFdBRUksTUFBTyxDQUNIUixZQUZTQyxLQUVTQyxNQUFNRixjQUVoQyxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vV2lkZ2V0cy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9XaWRnZXRzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9XaWRnZXRzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vV2lkZ2V0cy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL1dpZGdldHMvZXh0ZXJuYWwgdmFyIFwia29cIiIsIndlYnBhY2s6Ly9XaWRnZXRzLy4vZGVzaWduZXIvd2lkZ2V0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IGtvOyIsImltcG9ydCAqIGFzIGtvIGZyb20gXCJrbm9ja291dFwiO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDb252ZXJ0TGlzdEJvb2xlYW5Ub0dyYXBoaWNzRGVzaWduZXIoZWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbmZpZ3VyYXRpb246IGFueSwgYmFzZU1vZGVsOiBhbnkpOiBDb252ZXJ0TGlzdEJvb2xlYW5Ub0dyYXBoaWNzRGVzaWduZXJDbGFzcyB7XHJcbiAgICByZXR1cm4gbmV3IENvbnZlcnRMaXN0Qm9vbGVhblRvR3JhcGhpY3NEZXNpZ25lckNsYXNzKGVsZW1lbnQsIGNvbmZpZ3VyYXRpb24sIGJhc2VNb2RlbCk7XHJcbn0gXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ3VyYXRpb24ge1xyXG4gICAgYmxhZGU/OiBhbnk7XHJcbiAgICBfX3Njb3BlPzoge1xyXG4gICAgICAgIG1vZGU/OiBhbnk7XHJcbiAgICAgICAgc2hhcmVkb1R5cGVTeXN0ZW1OYW1lPzogYW55O1xyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSB0aGlzTW9kZWwgZXh0ZW5kcyBDb25maWd1cmF0aW9uXHJcbntcclxuICAgIHRvZG9NZXNzYWdlOiBrby5PYnNlcnZhYmxlPHN0cmluZz4gLFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29udmVydExpc3RCb29sZWFuVG9HcmFwaGljc0Rlc2lnbmVyQ2xhc3Mge1xyXG4gICAgbW9kZWw6IHRoaXNNb2RlbDtcclxuICAgIHZhbGlkYXRpb246IGFueTtcclxuICAgIHZhbGlkYXRpb25FcnJvckNvdW50OiBrby5Db21wdXRlZDxudW1iZXI+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjb25maWd1cmF0aW9uOiBDb25maWd1cmF0aW9uLCBiYXNlTW9kZWw6IGFueSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRzID0ge1xyXG4gICAgICAgICAgICB0b2RvTWVzc2FnZTogXCJcIixcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIGRlZmF1bHRzLCBjb25maWd1cmF0aW9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5tb2RlbCA9IHtcclxuICAgICAgICAgICAgdG9kb01lc3NhZ2U6IGtvLm9ic2VydmFibGUob3B0aW9ucy50b2RvTWVzc2FnZSksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy52YWxpZGF0aW9uID0ge1xyXG4gICAgICAgICAgICB0b2RvTWVzc2FnZToga28ucHVyZUNvbXB1dGVkKCgpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5tb2RlbD8udG9kb01lc3NhZ2UoKTtcclxuICAgICAgICAgICAgICAgIGlmICghbWVzc2FnZSkgcmV0dXJuIFwiVGhlIG1lc3NhZ2UgaXMgcmVxdWlyZWRcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnZhbGlkYXRpb25FcnJvckNvdW50ID0ga28ucHVyZUNvbXB1dGVkKCgpID0+IHtcclxuICAgICAgICAgICAgbGV0IGZhaWxzID0gMDtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmFsaWRhdGlvbi50b2RvTWVzc2FnZSgpKSBmYWlscysrO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFpbHM7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIC4uLlxyXG4gICAgfVxyXG5cclxuICAgIGxvYWRBbmRCaW5kKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIC4uLlxyXG4gICAgfVxyXG5cclxuICAgIGdldE1vZGVsKCk6IHsgdG9kb01lc3NhZ2U6IHN0cmluZyB8IHVuZGVmaW5lZCB9IHtcclxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0b2RvTWVzc2FnZTogc2VsZi5tb2RlbC50b2RvTWVzc2FnZSgpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsImtvIiwiQ29udmVydExpc3RCb29sZWFuVG9HcmFwaGljc0Rlc2lnbmVyIiwiZWxlbWVudCIsImNvbmZpZ3VyYXRpb24iLCJiYXNlTW9kZWwiLCJDb252ZXJ0TGlzdEJvb2xlYW5Ub0dyYXBoaWNzRGVzaWduZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIiQiLCJleHRlbmQiLCJ0b2RvTWVzc2FnZSIsInRoaXMiLCJtb2RlbCIsInZhbGlkYXRpb24iLCJ2YWxpZGF0aW9uRXJyb3JDb3VudCIsImZhaWxzIiwib25EZXN0cm95IiwibG9hZEFuZEJpbmQiLCJnZXRNb2RlbCJdLCJzb3VyY2VSb290IjoiIn0=