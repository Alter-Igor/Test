(()=>{var e={d:(t,o)=>{for(var r in o)e.o(o,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:o[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};(()=>{"use strict";e.r(t),e.d(t,{IBMatterWarning:()=>l});const o=ko;var r=function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};function n(e,t,o){return r(this,void 0,void 0,(function*(){let r=function(e){let t=window.document.location.origin;return-1===e.indexOf(t)&&(0!==e.indexOf("/")&&(e="/"+e),e=t+e),e}(e),n=function(){let e=(o=function(){let e={};return document.cookie.split(";").reduce((function(t,o){var r=o.split("=");if(2===r.length){var n=r[0].trim(),i=r[1];e[n]=i}return t}),{}),e}()._api)?"Bearer "+o:null,t=new Headers;var o;return t.append("Content-Type","application/json"),e&&t.append("Authorization",e),t}();return yield fetch(r,{method:t,headers:n,body:o?JSON.stringify(o):void 0}).then((e=>{var t;if(console.log(e),-1===(null===(t=e.headers.get("content-type"))||void 0===t?void 0:t.indexOf("application/json")))throw new Error("Response was not JSON");return e.json()}))}))}var i=function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};const a="form-custom-alt-ediscovery-instruction-matter-details.matter-details-ib",s="form-custom-alt-ediscovery-instruction-matter-details.matter-details-ib-last-check",c=moment;function l(e,t,o){return new d(e,t,o)}class d{constructor(e,t,r){const n=$.extend(!0,{},{id:null,todoMessage:null},t);!n.id&&$ui&&$ui.pageContext&&$ui.pageContext.sharedoId&&(n.id=$ui.pageContext.sharedoId()),this.model={todoMessage:n.todoMessage,id:n.id,informationBarrier:o.observable(),informationBarrierMessage:o.observable(),lastCheckDate:o.observable(),lastCheckDateFormatted:o.observable()}}onDestroy(){}loadAndBind(){this.model.id&&(this.model.informationBarrierMessage("Checking Information Barrier Status...."),function(e){return i(this,void 0,void 0,(function*(){return function(e,t){return r(this,void 0,void 0,(function*(){return n("/api/v1/public/workItem/findByQuery","POST",t)}))}(0,{search:{workItemIds:[e]},enrich:[{path:a},{path:s}]}).then((e=>{if(console.log("%c loadWorkItem","color: #ff0000"),console.log(e),!e||e.totalCount<1||e.results.length<1)throw new Error("Not found");return{informationBarrier:e.results[0].data[a],lastCheckDate:e.results[0].data[s]}})).catch((e=>{console.error("Error:",e)}))}))}(this.model.id).then((e=>{setTimeout((()=>{e&&(console.log("%c loadWorkItem","color: #ff0000",e),this.model.lastCheckDate(new Date(Date.now())),this.model.informationBarrier(e.informationBarrier),console.log("informationBarrier",e.informationBarrier),console.log(typeof e.informationBarrier),0==e.informationBarrier?(console.log("informationBarrier is true"),this.model.informationBarrierMessage("<div class='information_barrier_message active'>Warning! This matter is subject to an information barrier.</div>")):(console.log("informationBarrier is not true"),this.model.informationBarrierMessage("<div class='information_barrier_message'>This matter is not subject to an information barrier.</div>")),this.model.id&&function(e,t){i(this,void 0,void 0,(function*(){let o={workItem:{},aspectData:{FormBuilder:{formData:{"matter-details-ib-last-check":new Date(Date.now()),"matter-details-ib":t},formIds:["81ec0946-d9e8-4181-ad5a-9496e4fdd130"]}}};(function(e,t){return r(this,void 0,void 0,(function*(){return n(e,"PUT",t)}))})(`/api/v1/public/workItem/${e}`,o).then((e=>{console.log("updated",e)})).catch((e=>{console.error("Error:",e)}))}))}(this.model.id,!e.informationBarrier))}),5e3),setInterval((()=>{this.model.lastCheckDate()&&this.model.lastCheckDateFormatted(c(this.model.lastCheckDate()).fromNow())}),5e3)})))}}})();var o=eDiscovery="undefined"==typeof eDiscovery?{}:eDiscovery;for(var r in t)o[r]=t[r];t.__esModule&&Object.defineProperty(o,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,