(()=>{var e={d:(o,t)=>{for(var r in t)e.o(t,r)&&!e.o(o,r)&&Object.defineProperty(o,r,{enumerable:!0,get:t[r]})},o:(e,o)=>Object.prototype.hasOwnProperty.call(e,o),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},o={};(()=>{"use strict";e.r(o),e.d(o,{IBMatterWarningDesigner:()=>r,IBMatterWarningDesignerClass:()=>s});const t=ko;function r(e,o,t){return new s(e,o,t)}class s{constructor(e,o,r){const s=$.extend(!0,{},{todoMessage:""},o);this.model={todoMessage:t.observable(s.todoMessage)},this.validation={todoMessage:t.pureComputed((()=>{var e;return(null===(e=this.model)||void 0===e?void 0:e.todoMessage())?null:"The message is required"}))},this.validationErrorCount=t.pureComputed((()=>{let e=0;return this.validation.todoMessage()&&e++,e}))}onDestroy(){}loadAndBind(){}getModel(){return{todoMessage:this.model.todoMessage()}}}})();var t=eDiscovery="undefined"==typeof eDiscovery?{}:eDiscovery;for(var r in o)t[r]=o[r];o.__esModule&&Object.defineProperty(t,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzaWduZXIvSUJNYXR0ZXJXYXJuaW5nRGVzaWduZXIuanMiLCJtYXBwaW5ncyI6Ik1BQ0EsSUFBSUEsRUFBc0IsQ0NBMUJBLEVBQXdCLENBQUNDLEVBQVNDLEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWEYsRUFBb0JJLEVBQUVGLEVBQVlDLEtBQVNILEVBQW9CSSxFQUFFSCxFQUFTRSxJQUM1RUUsT0FBT0MsZUFBZUwsRUFBU0UsRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLElBRTFFLEVDTkRILEVBQXdCLENBQUNTLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEdDQ2xGVixFQUF5QkMsSUFDSCxvQkFBWGEsUUFBMEJBLE9BQU9DLGFBQzFDVixPQUFPQyxlQUFlTCxFQUFTYSxPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RYLE9BQU9DLGVBQWVMLEVBQVMsYUFBYyxDQUFFZSxPQUFPLEdBQU8sRyx5R0NMOUQsTUFBTSxFQUErQkMsR0NHOUIsU0FBU0MsRUFBd0JDLEVBQXNCQyxFQUFvQkMsR0FDOUUsT0FBTyxJQUFJQyxFQUE2QkgsRUFBU0MsRUFBZUMsRUFDcEUsQ0FlTyxNQUFNQyxFQUtUQyxZQUFZSixFQUFzQkMsRUFBOEJDLEdBRTVELE1BSU1HLEVBQVVDLEVBQUVDLFFBQU8sRUFBTSxDQUFDLEVBSmYsQ0FDYkMsWUFBYSxJQUc0QlAsR0FFN0NRLEtBQUtDLE1BQVEsQ0FDVEYsWUFBYSxhQUFjSCxFQUFRRyxjQUd2Q0MsS0FBS0UsV0FBYSxDQUNkSCxZQUFhLGdCQUFnQixLLE1BR3pCLE9BRDBCLFFBQVYsRUFBQUMsS0FBS0MsYUFBSyxlQUFFRixlQUVyQixLQURjLHlCQUNWLEtBSW5CQyxLQUFLRyxxQkFBdUIsZ0JBQWdCLEtBQ3hDLElBQUlDLEVBQVEsRUFFWixPQURJSixLQUFLRSxXQUFXSCxlQUFlSyxJQUM1QkEsQ0FBSyxHQUVwQixDQUVBQyxZQUVBLENBRUFDLGNBRUEsQ0FFQUMsV0FFSSxNQUFPLENBQ0hSLFlBRlNDLEtBRVNDLE1BQU1GLGNBRWhDLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lRGlzY292ZXJ5L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2VEaXNjb3Zlcnkvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2VEaXNjb3Zlcnkvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9lRGlzY292ZXJ5L3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vZURpc2NvdmVyeS9leHRlcm5hbCB2YXIgXCJrb1wiIiwid2VicGFjazovL2VEaXNjb3ZlcnkvLi9kZXNpZ25lci9JQk1hdHRlcldhcm5pbmdEZXNpZ25lci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSBrbzsiLCJpbXBvcnQgKiBhcyBrbyBmcm9tIFwia25vY2tvdXRcIjtcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gSUJNYXR0ZXJXYXJuaW5nRGVzaWduZXIoZWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbmZpZ3VyYXRpb246IGFueSwgYmFzZU1vZGVsOiBhbnkpOiBJQk1hdHRlcldhcm5pbmdEZXNpZ25lckNsYXNzIHtcclxuICAgIHJldHVybiBuZXcgSUJNYXR0ZXJXYXJuaW5nRGVzaWduZXJDbGFzcyhlbGVtZW50LCBjb25maWd1cmF0aW9uLCBiYXNlTW9kZWwpO1xyXG59IFxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb25maWd1cmF0aW9uIHtcclxuICAgIGJsYWRlPzogYW55O1xyXG4gICAgX19zY29wZT86IHtcclxuICAgICAgICBtb2RlPzogYW55O1xyXG4gICAgICAgIHNoYXJlZG9UeXBlU3lzdGVtTmFtZT86IGFueTtcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgdGhpc01vZGVsIGV4dGVuZHMgQ29uZmlndXJhdGlvblxyXG57XHJcbiAgICB0b2RvTWVzc2FnZToga28uT2JzZXJ2YWJsZTxzdHJpbmc+ICxcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIElCTWF0dGVyV2FybmluZ0Rlc2lnbmVyQ2xhc3Mge1xyXG4gICAgbW9kZWw6IHRoaXNNb2RlbDtcclxuICAgIHZhbGlkYXRpb246IGFueTtcclxuICAgIHZhbGlkYXRpb25FcnJvckNvdW50OiBrby5Db21wdXRlZDxudW1iZXI+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjb25maWd1cmF0aW9uOiBDb25maWd1cmF0aW9uLCBiYXNlTW9kZWw6IGFueSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRzID0ge1xyXG4gICAgICAgICAgICB0b2RvTWVzc2FnZTogXCJcIixcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIGRlZmF1bHRzLCBjb25maWd1cmF0aW9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5tb2RlbCA9IHtcclxuICAgICAgICAgICAgdG9kb01lc3NhZ2U6IGtvLm9ic2VydmFibGUob3B0aW9ucy50b2RvTWVzc2FnZSksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy52YWxpZGF0aW9uID0ge1xyXG4gICAgICAgICAgICB0b2RvTWVzc2FnZToga28ucHVyZUNvbXB1dGVkKCgpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5tb2RlbD8udG9kb01lc3NhZ2UoKTtcclxuICAgICAgICAgICAgICAgIGlmICghbWVzc2FnZSkgcmV0dXJuIFwiVGhlIG1lc3NhZ2UgaXMgcmVxdWlyZWRcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnZhbGlkYXRpb25FcnJvckNvdW50ID0ga28ucHVyZUNvbXB1dGVkKCgpID0+IHtcclxuICAgICAgICAgICAgbGV0IGZhaWxzID0gMDtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmFsaWRhdGlvbi50b2RvTWVzc2FnZSgpKSBmYWlscysrO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFpbHM7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIC4uLlxyXG4gICAgfVxyXG5cclxuICAgIGxvYWRBbmRCaW5kKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIC4uLlxyXG4gICAgfVxyXG5cclxuICAgIGdldE1vZGVsKCk6IHsgdG9kb01lc3NhZ2U6IHN0cmluZyB8IHVuZGVmaW5lZCB9IHtcclxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0b2RvTWVzc2FnZTogc2VsZi5tb2RlbC50b2RvTWVzc2FnZSgpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsImtvIiwiSUJNYXR0ZXJXYXJuaW5nRGVzaWduZXIiLCJlbGVtZW50IiwiY29uZmlndXJhdGlvbiIsImJhc2VNb2RlbCIsIklCTWF0dGVyV2FybmluZ0Rlc2lnbmVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCIkIiwiZXh0ZW5kIiwidG9kb01lc3NhZ2UiLCJ0aGlzIiwibW9kZWwiLCJ2YWxpZGF0aW9uIiwidmFsaWRhdGlvbkVycm9yQ291bnQiLCJmYWlscyIsIm9uRGVzdHJveSIsImxvYWRBbmRCaW5kIiwiZ2V0TW9kZWwiXSwic291cmNlUm9vdCI6IiJ9