(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{enumFields:()=>v,enumMatterDetailFields:()=>p,runMe:()=>s});var n=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{d(o.next(e))}catch(e){i(e)}}function l(e){try{d(o.throw(e))}catch(e){i(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}d((o=o.apply(e,t||[])).next())}))};function o(e,t,o){return n(this,void 0,void 0,(function*(){let n=function(e){let t=window.document.location.origin;return-1===e.indexOf(t)&&(0!==e.indexOf("/")&&(e="/"+e),e=t+e),e}(e),r=function(){let e=(n=function(){let e={};return document.cookie.split(";").reduce((function(t,n){var o=n.split("=");if(2===o.length){var r=o[0].trim(),i=o[1];e[r]=i}return t}),{}),e}()._api)?"Bearer "+n:null,t=new Headers;var n;return t.append("Content-Type","application/json"),e&&t.append("Authorization",e),t}();return yield fetch(n,{method:t,headers:r,body:o?JSON.stringify(o):void 0}).then((e=>{var t;if(console.log(e),-1===(null===(t=e.headers.get("content-type"))||void 0===t?void 0:t.indexOf("application/json")))throw new Error("Response was not JSON");return e.json()}))}))}var r=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{d(o.next(e))}catch(e){i(e)}}function l(e){try{d(o.throw(e))}catch(e){i(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}d((o=o.apply(e,t||[])).next())}))};var i=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{d(o.next(e))}catch(e){i(e)}}function l(e){try{d(o.throw(e))}catch(e){i(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}d((o=o.apply(e,t||[])).next())}))};function a(e,t){let n={roleConfig:[],ODSEntities:[]};if(!e)return n;let o=function(e){if(!e)return;let t=Sharedo.Core.Case.Aspects.Widgets.OdsEntityPicker;return e.aspects().filter((e=>e.widget instanceof t))}(e);return null==o||o.forEach((e=>{e.widget.odsEntities().forEach((e=>{e.roleSystemName&&e.roleSystemName()===t&&n.ODSEntities.push(e)})),e.widget.options.roleConfigModels.forEach((e=>{e.roleSystemName===t&&n.roleConfig.push(e)}))})),n}function l(e,t){return i(this,void 0,void 0,(function*(){let e=yield function(e){return r(this,void 0,void 0,(function*(){try{let t="/api/ods/_search";return yield function(e,t){return n(this,void 0,void 0,(function*(){return o(e,"POST",t)}))}(window.document.location.origin+t,e)}catch(t){console.warn("ODS Search Error",t,e)}}))}(t);return console.log("%c ODS Search Result","color: #ff0000",e),e?(console.log("%c ODS Search Result","color: #ff0000",e),function(e){try{return e.rows.map((e=>JSON.parse(e.result)))}catch(t){console.warn("ODS Helper Error trying to extract rows from search result",t,e)}return[]}(e)):(console.log("%c ODS Search Result - undefined","color: #ff0000"),[])}))}var d=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{d(o.next(e))}catch(e){i(e)}}function l(e){try{d(o.throw(e))}catch(e){i(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}d((o=o.apply(e,t||[])).next())}))};const u="matter-partner",c="client";function s(e){var t,n,o,r;let{expertMatterNumber:i,matterDetails:a,pipelineMatter:l}=function(e){if(!e.form)throw new Error("No form");let t=e.form.fieldsById[v.matterDetails];return{expertMatterNumber:e.form.fieldsById[v.expertMatterNumber],matterDetails:t,pipelineMatter:e.form.fieldsById[v.pipelineMatter]}}(e);if(!i)throw new Error("No expertMatterNumber");if(!a)throw new Error("No matterDetails");if(!l)throw new Error("No pipelineMatter");if(window.tester=e,void 0!==e.workItemContext.id()){let i=!0;if(!(null===(n=null===(t=e.workItemContext)||void 0===t?void 0:t.phaseName())||void 0===n?void 0:n.toLowerCase().includes("draft"))&&(null===(o=e.workItemContext)||void 0===o?void 0:o.phaseName())||(i=!1),!0===i)return console.log("%c [ModuleLoader] FB_MatterDetails - exit (only run on new)","background: #222; color: #bada55",e.workItemContext.id()),console.log("%c [ModuleLoader] context.workItemContext.id() ","background: #222; color: #bada55",e.workItemContext.id()),console.log("%c [ModuleLoader] context.workItemContext?.phaseName() ","background: #222; color: #bada55",null===(r=e.workItemContext)||void 0===r?void 0:r.phaseName()),!0}return window.aspectDebuger=window.aspectDebuger||{},window.aspectDebuger.matterDetailsFormBuilder=a,f(a,0,l),function(e,t,n,o){var r,i,a,l;if(!e.form)throw new Error("No form");null===(r=t.fieldsById[p.matterDetailsPartnerName])||void 0===r||r.on("change",(function(e){var n;console.log("%c Partner name changed to: "+(null===(n=t.fieldsById[p.matterDetailsPartnerName])||void 0===n?void 0:n.getValue()),"color: pink; font-size: 20px;")})),null===(i=e.form.fieldsById[v.expertMatterNumber])||void 0===i||i.on("change",(function(r){f(t,0,o),m(e,t,n,o)})),null===(a=e.form.fieldsById[v.pipelineMatter])||void 0===a||a.on("change",(function(r){f(t,0,o),m(e,t,n,o)})),null===(l=e.form.fieldsById[v.jurisdictionsCountry])||void 0===l||l.on("change",(function(t){var n,o,r,i;return d(this,void 0,void 0,(function*(){let t=null===(o=null===(n=e.form)||void 0===n?void 0:n.fieldsById["jurisdictions-country"])||void 0===o?void 0:o.getValue();console.log("%c Jurisdiction changed to: "+(null===(i=null===(r=e.form)||void 0===r?void 0:r.fieldsById["jurisdictions-country"])||void 0===i?void 0:i.getValue()),"color: red; font-size: 20px;");let a=e.getAspect("Sharedo.Core.Legal.Aspects.Widgets.InstructionWorkTypeDetails"),l=yield $ajax.get(`/api/v1/public/modeller/optionSets/allValues/${t}`);if(!l)return void console.log("%c [ModuleLoader] getAspect return value","background: #222; color: #bada55",l);let d=(yield $ajax.get("/api/v1/public/modeller/optionSets/jurisdictions/values")).find((e=>e.name===l.name));d?a.widget.instruction.jurisdictionId(d.id):console.log("%c [ModuleLoader] getAspect return value","background: #222; color: #bada55",d)}))}))}(e,a,i,l),function(e){var t,n;let o=new Date,r=`T${o.getFullYear()}${o.getMonth()+1}${o.getDate()}${o.getHours()}${o.getMinutes()}${o.getSeconds()}${o.getMilliseconds()}`;null===(n=null===(t=e.form)||void 0===t?void 0:t.fieldsById[v.tempMatterNumber])||void 0===n||n.setValue(r)}(e),$ui.events.broadcast("script.matterDetailsLoaded",e),!0}function f(e,t,n){!function(e,t=!0){var n;if(!e.fields)throw new Error("No fields");if(!e.fieldsById)throw new Error("No fieldsById");e.fields.forEach((e=>{e.readonly(!t)})),null===(n=e.fieldsById[p.matterDetailsIbLastChecked])||void 0===n||n.hidden(!0)}(e,n.getValue())}function m(e,t,r,s){var f,m,g,y,h,w,b,D,x,N,M,S,I,C,E,O,P,B,k;return d(this,void 0,void 0,(function*(){let V=yield function(e){return d(this,void 0,void 0,(function*(){let t=[];if(void 0===e||0===e.length)return t;try{let r=yield function(e){return n(this,void 0,void 0,(function*(){return o(e,"GET",void 0)}))}(`/api/externalMatterProvider/details/${e}`);if(console.log("%c [ModuleLoader] getMatterData return value","background: #222; color: #bada55",r),r&&r.matterCode){let e={data:r};t.push(e)}}catch(e){console.log("Failed to get matter data from server",e)}return t}))}(r.getValue());console.log(V);let j=V.find((function(e){return r.getValue()===e.data.matterCode}));if(void 0===j||!0===s.getValue())return void function(e){var t;d(this,void 0,void 0,(function*(){null===(t=e.fields)||void 0===t||t.forEach((function(e){e.setValue("")}))}))}(t);if(!(null===(f=t.parent)||void 0===f?void 0:f.fieldsById))throw new Error("No client");let A=null===(g=null===(m=t.parent)||void 0===m?void 0:m.fieldsById["temp-matter-number"])||void 0===g?void 0:g.getValue();void 0===A||A.length,null===(h=null===(y=e.form)||void 0===y?void 0:y.fieldsById[v.expertMatterNumberValue])||void 0===h||h.setValue((null===(w=null==j?void 0:j.data)||void 0===w?void 0:w.matterCode)||""),null===(b=t.fieldsById[p.matterDetailsClientName])||void 0===b||b.setValue((null===(x=null===(D=null==j?void 0:j.data)||void 0===D?void 0:D.client)||void 0===x?void 0:x.name)||""),null===(N=t.fieldsById[p.matterDetailsClientCode])||void 0===N||N.setValue((null===(S=null===(M=null==j?void 0:j.data)||void 0===M?void 0:M.client)||void 0===S?void 0:S.code)||""),null===(I=t.fieldsById[p.matterDetailsName])||void 0===I||I.setValue((null===(C=null==j?void 0:j.data)||void 0===C?void 0:C.shortName)||""),null===(E=t.fieldsById[p.matterDetailsPartnerName])||void 0===E||E.setValue((null===(P=null===(O=null==j?void 0:j.data)||void 0===O?void 0:O.partner)||void 0===P?void 0:P.name)||""),null===(B=t.fieldsById[p.matterDetailsIb])||void 0===B||B.setValue((null===(k=null==j?void 0:j.data)||void 0===k?void 0:k.secure)||""),console.log("matterDetails.isValid():"+t.isValid());try{!function(e,t){(function(e){return i(this,void 0,void 0,(function*(){return l(0,{startPage:1,endPage:1,rowsPerPage:10,searchString:e,odsEntityTypes:[],availability:{isAvailable:null,isOutOfOffice:null,isNotAvailable:null},location:{postcode:null,range:10},connection:{systemName:null},competencies:[],teams:[],roles:[],odsTypes:["client"],wallManagement:!1})}))})(e.data.client.code).then((e=>{let n=e[0];console.log("%c Found Client name : "+(null==n?void 0:n.name),"color: pink; font-size: 20px;",e);let o=function(e){return a(e.blade,c)}(t),r=o.roleConfig[0],i=o.ODSEntities[0];if(!r||!i)return;if(!n)return void i.selected(!1);let l=r.addService.createSelectedEntityModel(n.id,"organisation",n.name);r.addService.selectedEntity(l)}))}(j,e)}catch(e){console.log("Failed to auto updating ods pickers, user required to select manually")}try{!function(e,t){e.data.partner.name.split(",")[0],function(e){return i(this,void 0,void 0,(function*(){return l(0,{startPage:1,endPage:1,rowsPerPage:10,searchString:e,odsEntityTypes:[],availability:{isAvailable:null,isOutOfOffice:null,isNotAvailable:null},location:{postcode:null,range:10},connection:{systemName:null},competencies:[],teams:[],roles:[],odsTypes:["acl","alt-ediscovery-user-type","client","department","document-training-type","employee","expert","external-team","external","pod","structural","system-administrator"],wallManagement:!1})}))}(e.data.partner.email).then((e=>{let n=e[0];console.log("%c Partner name changed to: "+(null==n?void 0:n.id),"color: pink; font-size: 20px;",n);let o=function(e){return a(e.blade,u)}(t),r=o.roleConfig[0],i=o.ODSEntities[0];if(!r||!i)return;if(!n)return void i.selected(!1);let l=r.addService.createSelectedEntityModel(n.id,"user",n.firstName+" "+n.surname);r.addService.selectedEntity(l)}))}(j,e)}catch(e){console.log("Failed to auto updating ods pickers, user required to select manually")}}))}var v,p;!function(e){e.customAltEdiscoveryInstructionMatterDetails="custom-alt-ediscovery-instruction-matter-details",e.jurisdictionsCountry="jurisdictions-country",e.pipelineMatter="pipeline-matter",e.expertMatterNumber="expert-matter-number",e.expertMatterNumberValue="expert-matter-number-value",e.tempMatterNumber="temp-matter-number",e.subMatterCode="sub-matter-code",e.abcMatterNumber="abc-matter-number",e.matterDetails="matter-details"}(v||(v={})),function(e){e.matterDetailsPartnerSelector="matter-details-partner-selector",e.matterDetailsPartnerName="matter-details-partner-name",e.matterDetailsClientName="matter-details-client-name",e.matterDetailsClientCode="matter-details-client-code",e.matterDetailsPracticeArea="matter-details-practice-area",e.matterDetailsName="matter-details-name",e.matterDetailsIb="matter-details-ib",e.matterDetailsIbLastChecked="matter-details-ib-last-check"}(p||(p={})),window.FB_MatterDetails=t})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,