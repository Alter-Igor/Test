(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{enumFields:()=>v,enumMatterDetailFields:()=>p,runMe:()=>c});var n=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{d(r.next(e))}catch(e){o(e)}}function l(e){try{d(r.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}d((r=r.apply(e,t||[])).next())}))},r=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{d(r.next(e))}catch(e){o(e)}}function l(e){try{d(r.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}d((r=r.apply(e,t||[])).next())}))};var i=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{d(r.next(e))}catch(e){o(e)}}function l(e){try{d(r.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}d((r=r.apply(e,t||[])).next())}))};function o(e,t){let n={roleConfig:[],ODSEntities:[]};if(!e)return n;let r=function(e){if(!e)return;let t=Sharedo.Core.Case.Aspects.Widgets.OdsEntityPicker;return e.aspects().filter((e=>e.widget instanceof t))}(e);return null==r||r.forEach((e=>{e.widget.odsEntities().forEach((e=>{e.roleSystemName&&e.roleSystemName()===t&&n.ODSEntities.push(e)})),e.widget.options.roleConfigModels.forEach((e=>{e.roleSystemName===t&&n.roleConfig.push(e)}))})),n}function a(e,t){return i(this,void 0,void 0,(function*(){let e=yield function(e){return r(this,void 0,void 0,(function*(){try{let t="/api/ods/_search";return yield function(e,t){return n(this,void 0,void 0,(function*(){return yield $ajax.post(e,t)}))}(window.document.location.origin+t,e)}catch(t){console.warn("ODS Search Error",t,e)}}))}(t);return console.log("%c ODS Search Result","color: #ff0000",e),e?(console.log("%c ODS Search Result","color: #ff0000",e),function(e){try{return e.rows.map((e=>JSON.parse(e.result)))}catch(t){console.warn("ODS Helper Error trying to extract rows from search result",t,e)}return[]}(e)):(console.log("%c ODS Search Result - undefined","color: #ff0000"),[])}))}var l=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{d(r.next(e))}catch(e){o(e)}}function l(e){try{d(r.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}d((r=r.apply(e,t||[])).next())}))};const d="matter-partner",u="client";function c(e){var t,n;let{expertMatterNumber:r,matterDetails:i,pipelineMatter:o}=function(e){if(!e.form)throw new Error("No form");let t=e.form.fieldsById[v.matterDetails];return{expertMatterNumber:e.form.fieldsById[v.expertMatterNumber],matterDetails:t,pipelineMatter:e.form.fieldsById[v.pipelineMatter]}}(e);if(!r)throw new Error("No expertMatterNumber");if(!i)throw new Error("No matterDetails");if(!o)throw new Error("No pipelineMatter");window.tester=e,void 0===e.workItemContext.id()||(null===(n=null===(t=e.workItemContext)||void 0===t?void 0:t.phaseName())||void 0===n?void 0:n.toLowerCase().includes("draft"))?(s(i,0,o),function(e,t,n,r){var i,o,a,d;if(!e.form)throw new Error("No form");null===(i=t.fieldsById[p.matterDetailsPartnerName])||void 0===i||i.on("change",(function(e){var n;console.log("%c Partner name changed to: "+(null===(n=t.fieldsById[p.matterDetailsPartnerName])||void 0===n?void 0:n.getValue()),"color: pink; font-size: 20px;")})),null===(o=e.form.fieldsById[v.expertMatterNumber])||void 0===o||o.on("change",(function(i){s(t,0,r),m(e,t,n,r)})),null===(a=e.form.fieldsById[v.pipelineMatter])||void 0===a||a.on("change",(function(i){s(t,0,r),m(e,t,n,r)})),null===(d=e.form.fieldsById[v.jurisdictionsCountry])||void 0===d||d.on("change",(function(t){var n,r,i,o;return l(this,void 0,void 0,(function*(){let t=null===(r=null===(n=e.form)||void 0===n?void 0:n.fieldsById["jurisdictions-country"])||void 0===r?void 0:r.getValue();console.log("%c Jurisdiction changed to: "+(null===(o=null===(i=e.form)||void 0===i?void 0:i.fieldsById["jurisdictions-country"])||void 0===o?void 0:o.getValue()),"color: red; font-size: 20px;");let a=e.getAspect("Sharedo.Core.Legal.Aspects.Widgets.InstructionWorkTypeDetails"),l=yield $ajax.get(`/api/v1/public/modeller/optionSets/allValues/${t}`);if(!l)return void console.log("%c [ModuleLoader] getAspect return value","background: #222; color: #bada55",l);let d=(yield $ajax.get("/api/v1/public/modeller/optionSets/jurisdictions/values")).find((e=>e.name===l.name));d?a.widget.instruction.jurisdictionId(d.id):console.log("%c [ModuleLoader] getAspect return value","background: #222; color: #bada55",d)}))}))}(e,i,r,o),function(e){var t,n;let r=new Date,i=`T${r.getFullYear()}${r.getMonth()+1}${r.getDate()}${r.getHours()}${r.getMinutes()}${r.getSeconds()}${r.getMilliseconds()}`;null===(n=null===(t=e.form)||void 0===t?void 0:t.fieldsById[v.tempMatterNumber])||void 0===n||n.setValue(i)}(e)):console.log("%c [ModuleLoader] FB_MatterDetails - exit (only run on new)","background: #222; color: #bada55",e.workItemContext.id())}function s(e,t,n){!function(e,t=!0){if(!e.fields)throw new Error("No fields");if(!e.fieldsById)throw new Error("No fieldsById");e.fields.forEach((e=>{e.readonly(!t)}))}(e,n.getValue())}function f(e){var t;return l(this,void 0,void 0,(function*(){null===(t=e.fields)||void 0===t||t.forEach((function(e){e.setValue("")}))}))}function m(e,t,n,r){var c,s,m,y,g,h,w,b,D,N,S;return l(this,void 0,void 0,(function*(){let M=yield function(){return l(this,void 0,void 0,(function*(){return yield $ajax.get(window.document.location.origin+"/_ideFiles/SampleData/eDiscovery/matters.json")}))}();f(t);let x=M.find((function(e){return n.getValue()===e.data.matterCode}));if(void 0===x||!0===r.getValue())return void f(t);if(!(null===(c=t.parent)||void 0===c?void 0:c.fieldsById))throw new Error("No client");let I=null===(m=null===(s=t.parent)||void 0===s?void 0:s.fieldsById["temp-matter-number"])||void 0===m?void 0:m.getValue();void 0===I||I.length,null===(g=null===(y=e.form)||void 0===y?void 0:y.fieldsById[v.expertMatterNumberValue])||void 0===g||g.setValue(x.data.matterCode),null===(h=t.fieldsById[p.matterDetailsClientName])||void 0===h||h.setValue(x.data.client.name),null===(w=t.fieldsById[p.matterDetailsClientCode])||void 0===w||w.setValue(x.data.client.code),null===(b=t.fieldsById[p.matterDetailsPracticeArea])||void 0===b||b.setValue(x.data.practiceArea.name),null===(D=t.fieldsById[p.matterDetailsName])||void 0===D||D.setValue(x.data.shortName),null===(N=t.fieldsById[p.matterDetailsPartnerName])||void 0===N||N.setValue(x.data.partner.name),null===(S=t.fieldsById[p.matterDetailsIb])||void 0===S||S.setValue(x.data.secure),console.log("matterDetails.isValid():"+t.isValid());try{!function(e,t){e.data.partner.name.split(",")[0],function(e){return i(this,void 0,void 0,(function*(){return a(0,{startPage:1,endPage:1,rowsPerPage:10,searchString:e,odsEntityTypes:[],availability:{isAvailable:null,isOutOfOffice:null,isNotAvailable:null},location:{postcode:null,range:10},connection:{systemName:null},competencies:[],teams:[],roles:[],odsTypes:["acl","alt-ediscovery-user-type","client","department","document-training-type","employee","expert","external-team","external","pod","structural","system-administrator"],wallManagement:!1})}))}(e.data.partner.email).then((e=>{let n=e[0];console.log("%c Partner name changed to: "+(null==n?void 0:n.id),"color: pink; font-size: 20px;",n);let r=function(e){return o(e.blade,d)}(t),i=r.roleConfig[0],a=r.ODSEntities[0];if(!i||!a)return;if(!n)return void a.selected(!1);let l=i.addService.createSelectedEntityModel(n.id,"user",n.firstName+" "+n.surname);i.addService.selectedEntity(l)}))}(x,e),function(e,t){(function(e){return i(this,void 0,void 0,(function*(){return a(0,{startPage:1,endPage:1,rowsPerPage:10,searchString:e,odsEntityTypes:[],availability:{isAvailable:null,isOutOfOffice:null,isNotAvailable:null},location:{postcode:null,range:10},connection:{systemName:null},competencies:[],teams:[],roles:[],odsTypes:["client"],wallManagement:!1})}))})(e.data.client.code).then((e=>{let n=e[0];console.log("%c Found Client name : "+(null==n?void 0:n.name),"color: pink; font-size: 20px;",e);let r=function(e){return o(e.blade,u)}(t),i=r.roleConfig[0],a=r.ODSEntities[0];if(!i||!a)return;if(!n)return void a.selected(!1);let l=i.addService.createSelectedEntityModel(n.id,"organisation",n.name);i.addService.selectedEntity(l)}))}(x,e)}catch(e){console.log("Failed to auto updating ods pickers, user required to select manually")}}))}var v,p;!function(e){e.customAltEdiscoveryInstructionMatterDetails="custom-alt-ediscovery-instruction-matter-details",e.jurisdictionsCountry="jurisdictions-country",e.pipelineMatter="pipeline-matter",e.expertMatterNumber="expert-matter-number",e.expertMatterNumberValue="expert-matter-number-value",e.tempMatterNumber="temp-matter-number",e.subMatterCode="sub-matter-code",e.abcMatterNumber="abc-matter-number",e.matterDetails="matter-details"}(v||(v={})),function(e){e.matterDetailsPartnerSelector="matter-details-partner-selector",e.matterDetailsPartnerName="matter-details-partner-name",e.matterDetailsClientName="matter-details-client-name",e.matterDetailsClientCode="matter-details-client-code",e.matterDetailsPracticeArea="matter-details-practice-area",e.matterDetailsName="matter-details-name",e.matterDetailsIb="matter-details-ib"}(p||(p={})),window.FB_MatterDetails=t})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,