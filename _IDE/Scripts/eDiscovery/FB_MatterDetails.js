(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{enumFields:()=>p,enumMatterDetailFields:()=>g,runMe:()=>s});var n=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function l(e){try{d(o.next(e))}catch(e){i(e)}}function a(e){try{d(o.throw(e))}catch(e){i(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,a)}d((o=o.apply(e,t||[])).next())}))};function o(e){let t=window.document.location.origin;return-1===e.indexOf(t)&&(0!==e.indexOf("/")&&(e="/"+e),e=t+e),e}var r=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function l(e){try{d(o.next(e))}catch(e){i(e)}}function a(e){try{d(o.throw(e))}catch(e){i(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,a)}d((o=o.apply(e,t||[])).next())}))};var i=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function l(e){try{d(o.next(e))}catch(e){i(e)}}function a(e){try{d(o.throw(e))}catch(e){i(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,a)}d((o=o.apply(e,t||[])).next())}))};function l(e,t){let n={roleConfig:[],ODSEntities:[]};if(!e)return n;let o=function(e){if(!e)return;let t=Sharedo.Core.Case.Aspects.Widgets.OdsEntityPicker;return e.aspects().filter((e=>e.widget instanceof t))}(e);return null==o||o.forEach((e=>{e.widget.odsEntities().forEach((e=>{e.roleSystemName&&e.roleSystemName()===t&&n.ODSEntities.push(e)})),e.widget.options.roleConfigModels.forEach((e=>{e.roleSystemName===t&&n.roleConfig.push(e)}))})),n}function a(e,t){return i(this,void 0,void 0,(function*(){let e=yield function(e){return r(this,void 0,void 0,(function*(){try{let t="/api/ods/_search";return yield function(e,t){return n(this,void 0,void 0,(function*(){return yield $ajax.post(o(e),t)}))}(window.document.location.origin+t,e)}catch(t){console.warn("ODS Search Error",t,e)}}))}(t);return console.log("%c ODS Search Result","color: #ff0000",e),e?(console.log("%c ODS Search Result","color: #ff0000",e),function(e){try{return e.rows.map((e=>JSON.parse(e.result)))}catch(t){console.warn("ODS Helper Error trying to extract rows from search result",t,e)}return[]}(e)):(console.log("%c ODS Search Result - undefined","color: #ff0000"),[])}))}var d=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function l(e){try{d(o.next(e))}catch(e){i(e)}}function a(e){try{d(o.throw(e))}catch(e){i(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,a)}d((o=o.apply(e,t||[])).next())}))};const u="matter-partner",c="client";function s(e){var t,n,o,r;let{expertMatterNumber:i,matterDetails:l,pipelineMatter:a}=function(e){if(!e.form)throw new Error("No form");let t=e.form.fieldsById[p.matterDetails];return{expertMatterNumber:e.form.fieldsById[p.expertMatterNumber],matterDetails:t,pipelineMatter:e.form.fieldsById[p.pipelineMatter]}}(e);if(!i)throw new Error("No expertMatterNumber");if(!l)throw new Error("No matterDetails");if(!a)throw new Error("No pipelineMatter");if(window.tester=e,void 0!==e.workItemContext.id()){let i=!0;if(!(null===(n=null===(t=e.workItemContext)||void 0===t?void 0:t.phaseName())||void 0===n?void 0:n.toLowerCase().includes("draft"))&&(null===(o=e.workItemContext)||void 0===o?void 0:o.phaseName())||(i=!1),!0===i)return console.log("%c [ModuleLoader] FB_MatterDetails - exit (only run on new)","background: #222; color: #bada55",e.workItemContext.id()),console.log("%c [ModuleLoader] context.workItemContext.id() ","background: #222; color: #bada55",e.workItemContext.id()),console.log("%c [ModuleLoader] context.workItemContext?.phaseName() ","background: #222; color: #bada55",null===(r=e.workItemContext)||void 0===r?void 0:r.phaseName()),!0}return f(l,0,a),function(e,t,n,o){var r,i,l,a;if(!e.form)throw new Error("No form");null===(r=t.fieldsById[g.matterDetailsPartnerName])||void 0===r||r.on("change",(function(e){var n;console.log("%c Partner name changed to: "+(null===(n=t.fieldsById[g.matterDetailsPartnerName])||void 0===n?void 0:n.getValue()),"color: pink; font-size: 20px;")})),null===(i=e.form.fieldsById[p.expertMatterNumber])||void 0===i||i.on("change",(function(r){f(t,0,o),v(e,t,n,o)})),null===(l=e.form.fieldsById[p.pipelineMatter])||void 0===l||l.on("change",(function(r){f(t,0,o),v(e,t,n,o)})),null===(a=e.form.fieldsById[p.jurisdictionsCountry])||void 0===a||a.on("change",(function(t){var n,o,r,i;return d(this,void 0,void 0,(function*(){let t=null===(o=null===(n=e.form)||void 0===n?void 0:n.fieldsById["jurisdictions-country"])||void 0===o?void 0:o.getValue();console.log("%c Jurisdiction changed to: "+(null===(i=null===(r=e.form)||void 0===r?void 0:r.fieldsById["jurisdictions-country"])||void 0===i?void 0:i.getValue()),"color: red; font-size: 20px;");let l=e.getAspect("Sharedo.Core.Legal.Aspects.Widgets.InstructionWorkTypeDetails"),a=yield $ajax.get(`/api/v1/public/modeller/optionSets/allValues/${t}`);if(!a)return void console.log("%c [ModuleLoader] getAspect return value","background: #222; color: #bada55",a);let d=(yield $ajax.get("/api/v1/public/modeller/optionSets/jurisdictions/values")).find((e=>e.name===a.name));d?l.widget.instruction.jurisdictionId(d.id):console.log("%c [ModuleLoader] getAspect return value","background: #222; color: #bada55",d)}))}))}(e,l,i,a),function(e){var t,n;let o=new Date,r=`T${o.getFullYear()}${o.getMonth()+1}${o.getDate()}${o.getHours()}${o.getMinutes()}${o.getSeconds()}${o.getMilliseconds()}`;null===(n=null===(t=e.form)||void 0===t?void 0:t.fieldsById[p.tempMatterNumber])||void 0===n||n.setValue(r)}(e),$ui.events.broadcast("script.matterDetailsLoaded",e),!0}function f(e,t,n){!function(e,t=!0){if(!e.fields)throw new Error("No fields");if(!e.fieldsById)throw new Error("No fieldsById");e.fields.forEach((e=>{e.readonly(!t)}))}(e,n.getValue())}function m(e){var t;return d(this,void 0,void 0,(function*(){null===(t=e.fields)||void 0===t||t.forEach((function(e){e.setValue("")}))}))}function v(e,t,r,s){var f,v,y,h,w,b,x,M,N,D,S,I,C,E,P,O,B,k,V;return d(this,void 0,void 0,(function*(){let j=yield function(e){return d(this,void 0,void 0,(function*(){let t=[];if(void 0===e||0===e.length)return t;let r=yield function(e){return n(this,void 0,void 0,(function*(){return yield $ajax.get(o(e))}))}(`/api/externalMatterProvider/details/${e}`);if(console.log("%c [ModuleLoader] getMatterData return value","background: #222; color: #bada55",r),r&&r.matterCode){let e={data:r};t.push(e)}return t}))}(r.getValue());console.log(j),m(t);let $=j.find((function(e){return r.getValue()===e.data.matterCode}));if(void 0===$||!0===s.getValue())return void m(t);if(!(null===(f=t.parent)||void 0===f?void 0:f.fieldsById))throw new Error("No client");let A=null===(y=null===(v=t.parent)||void 0===v?void 0:v.fieldsById["temp-matter-number"])||void 0===y?void 0:y.getValue();void 0===A||A.length,null===(w=null===(h=e.form)||void 0===h?void 0:h.fieldsById[p.expertMatterNumberValue])||void 0===w||w.setValue((null===(b=null==$?void 0:$.data)||void 0===b?void 0:b.matterCode)||""),null===(x=t.fieldsById[g.matterDetailsClientName])||void 0===x||x.setValue((null===(N=null===(M=null==$?void 0:$.data)||void 0===M?void 0:M.client)||void 0===N?void 0:N.name)||""),null===(D=t.fieldsById[g.matterDetailsClientCode])||void 0===D||D.setValue((null===(I=null===(S=null==$?void 0:$.data)||void 0===S?void 0:S.client)||void 0===I?void 0:I.code)||""),null===(C=t.fieldsById[g.matterDetailsName])||void 0===C||C.setValue((null===(E=null==$?void 0:$.data)||void 0===E?void 0:E.shortName)||""),null===(P=t.fieldsById[g.matterDetailsPartnerName])||void 0===P||P.setValue((null===(B=null===(O=null==$?void 0:$.data)||void 0===O?void 0:O.partner)||void 0===B?void 0:B.name)||""),null===(k=t.fieldsById[g.matterDetailsIb])||void 0===k||k.setValue((null===(V=null==$?void 0:$.data)||void 0===V?void 0:V.secure)||""),console.log("matterDetails.isValid():"+t.isValid());try{!function(e,t){(function(e){return i(this,void 0,void 0,(function*(){return a(0,{startPage:1,endPage:1,rowsPerPage:10,searchString:e,odsEntityTypes:[],availability:{isAvailable:null,isOutOfOffice:null,isNotAvailable:null},location:{postcode:null,range:10},connection:{systemName:null},competencies:[],teams:[],roles:[],odsTypes:["client"],wallManagement:!1})}))})(e.data.client.code).then((e=>{let n=e[0];console.log("%c Found Client name : "+(null==n?void 0:n.name),"color: pink; font-size: 20px;",e);let o=function(e){return l(e.blade,c)}(t),r=o.roleConfig[0],i=o.ODSEntities[0];if(!r||!i)return;if(!n)return void i.selected(!1);let a=r.addService.createSelectedEntityModel(n.id,"organisation",n.name);r.addService.selectedEntity(a)}))}($,e)}catch(e){console.log("Failed to auto updating ods pickers, user required to select manually")}try{!function(e,t){e.data.partner.name.split(",")[0],function(e){return i(this,void 0,void 0,(function*(){return a(0,{startPage:1,endPage:1,rowsPerPage:10,searchString:e,odsEntityTypes:[],availability:{isAvailable:null,isOutOfOffice:null,isNotAvailable:null},location:{postcode:null,range:10},connection:{systemName:null},competencies:[],teams:[],roles:[],odsTypes:["acl","alt-ediscovery-user-type","client","department","document-training-type","employee","expert","external-team","external","pod","structural","system-administrator"],wallManagement:!1})}))}(e.data.partner.email).then((e=>{let n=e[0];console.log("%c Partner name changed to: "+(null==n?void 0:n.id),"color: pink; font-size: 20px;",n);let o=function(e){return l(e.blade,u)}(t),r=o.roleConfig[0],i=o.ODSEntities[0];if(!r||!i)return;if(!n)return void i.selected(!1);let a=r.addService.createSelectedEntityModel(n.id,"user",n.firstName+" "+n.surname);r.addService.selectedEntity(a)}))}($,e)}catch(e){console.log("Failed to auto updating ods pickers, user required to select manually")}}))}var p,g;!function(e){e.customAltEdiscoveryInstructionMatterDetails="custom-alt-ediscovery-instruction-matter-details",e.jurisdictionsCountry="jurisdictions-country",e.pipelineMatter="pipeline-matter",e.expertMatterNumber="expert-matter-number",e.expertMatterNumberValue="expert-matter-number-value",e.tempMatterNumber="temp-matter-number",e.subMatterCode="sub-matter-code",e.abcMatterNumber="abc-matter-number",e.matterDetails="matter-details"}(p||(p={})),function(e){e.matterDetailsPartnerSelector="matter-details-partner-selector",e.matterDetailsPartnerName="matter-details-partner-name",e.matterDetailsClientName="matter-details-client-name",e.matterDetailsClientCode="matter-details-client-code",e.matterDetailsPracticeArea="matter-details-practice-area",e.matterDetailsName="matter-details-name",e.matterDetailsIb="matter-details-ib"}(g||(g={})),window.FB_MatterDetails=t})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,